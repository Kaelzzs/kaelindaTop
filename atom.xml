<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kaelinda]]></title>
  <link href="http://blog.csdn.net/atom.xml" rel="self"/>
  <link href="http://blog.csdn.net/"/>
  <updated>2018-04-02T18:32:21+08:00</updated>
  <id>http://blog.csdn.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[每天学习一个shell技能（7）]]></title>
    <link href="http://blog.csdn.net/15226648731246.html"/>
    <updated>2018-04-02T18:27:53+08:00</updated>
    <id>http://blog.csdn.net/15226648731246.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">文件包含 导入文件</h2>

<p>测试文件  test1.sh</p>

<pre><code>#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

url=&quot;http://www.runoob.com&quot;
</code></pre>

<p>测试文件 test2.sh</p>

<pre><code>#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

#使用 . 号来引用test1.sh 文件
. ./test1.sh

# 或者使用以下包含文件代码
# source ./test1.sh

echo &quot;菜鸟教程官网地址：$url&quot;
</code></pre>

<span id="more"></span><!-- more -->

<pre><code>$ chmod +x test2.sh 
$ ./test2.sh 
菜鸟教程官网地址：http://www.runoob.com
</code></pre>

<h2 id="toc_1">输入/输出  重定向</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天学习一个shell技能（6）]]></title>
    <link href="http://blog.csdn.net/15226603064743.html"/>
    <updated>2018-04-02T17:11:46+08:00</updated>
    <id>http://blog.csdn.net/15226603064743.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">test</h2>

<h3 id="toc_1">test文件</h3>

<pre><code>if test -e ./test.sh
then
    echo &#39;文件已存在!&#39;
else
    echo &#39;文件不存在!&#39;
fi
</code></pre>

<ul>
<li>-e fileName ： 如果文件存在则为真</li>
<li>-r  fileName : 如果文件存在且可读则为真</li>
<li>-w fileName : 如果文件存在且可写则为真</li>
<li>-x fileName : 如果文件存在且可执行则为真</li>
<li>-s fileName: 文件存在且至少有一个字符</li>
<li>-d fileName : 文件存在且为目录</li>
<li>-f fileName: 文件存在且为文件</li>
<li>-c fileName:文件存在，且为字符型特殊文件</li>
<li>-b fileName: 如果文件存在且为块特殊文件则为真</li>
</ul>

<span id="more"></span><!-- more -->

<h3 id="toc_2">test字符串</h3>

<ul>
<li>= ：等于则为真</li>
<li>!= :不等于则为真</li>
<li>-z : 字符串长度为零则为真</li>
<li>-n : 字符串长度不为零则为真</li>
</ul>

<h3 id="toc_3">数值测试</h3>

<ul>
<li>-eq :等于</li>
<li>-ne : 不等于</li>
<li>-gt:大于</li>
<li>-lt:小于</li>
<li>-ge:大于等于</li>
<li>-le: 小于等于</li>
</ul>

<h2 id="toc_4">流程控制(条件)</h2>

<h3 id="toc_5">if</h3>

<pre><code>if condition
then
    command1 
    command2
    ...
    commandN 
fi
</code></pre>

<h3 id="toc_6">if else</h3>

<pre><code>if condition
then
    command1 
    command2
    ...
    commandN
else
    command
fi
</code></pre>

<h3 id="toc_7">if else-if else</h3>

<pre><code>if condition1
then
    command1
elif condition2 
then 
    command2
else
    commandN
fi
</code></pre>

<p>实例 用法：</p>

<pre><code>a=10
b=20
if [ $a == $b ]
then
   echo &quot;a 等于 b&quot;
elif [ $a -gt $b ]
then
   echo &quot;a 大于 b&quot;
elif [ $a -lt $b ]
then
   echo &quot;a 小于 b&quot;
else
   echo &quot;没有符合的条件&quot;
fi
</code></pre>

<h2 id="toc_8">控制流（for 循环）</h2>

<pre><code>for var in item1 item2 ... itemN
do
    command1
    command2
    ...
    commandN
done
</code></pre>

<p>改成一行：</p>

<pre><code>for var in item1 item2 ... itemN; do command1; command2… done;
</code></pre>

<h2 id="toc_9">while</h2>

<pre><code>while condition
do
    command
done
</code></pre>

<pre><code>int=1
while(( $int&lt;=5 ))
do
    echo $int
    let &quot;int++&quot;
done
</code></pre>

<p>无限循环：</p>

<pre><code>while :
do
    command
done

// 或者
while true
do
    command
done

// 或者
for (( ; ; ))

</code></pre>

<h2 id="toc_10">until 循环</h2>

<pre><code>until condition
do
    command
done
</code></pre>

<h2 id="toc_11">case in</h2>

<pre><code>case 值 in
模式1)
    command1
    command2
    ...
    commandN
    ;;
模式2）
    command1
    command2
    ...
    commandN
    ;;
esac
</code></pre>

<h2 id="toc_12">跳出循环</h2>

<h3 id="toc_13">break</h3>

<blockquote>
<p>break命令允许跳出所有循环（终止执行后面的所有循环）</p>
</blockquote>

<h3 id="toc_14">continue</h3>

<blockquote>
<p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环</p>
</blockquote>

<pre><code>while :
do
    echo -n &quot;输入 1 到 5 之间的数字: &quot;
    read aNum
    case $aNum in
        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;
        ;;
        *) echo &quot;你输入的数字不是 1 到 5 之间的!&quot;
            continue
            echo &quot;游戏结束&quot;
        ;;
    esac
done
</code></pre>

<h3 id="toc_15">esac</h3>

<blockquote>
<p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天学习一个shell技能（5）]]></title>
    <link href="http://blog.csdn.net/15224936933861.html"/>
    <updated>2018-03-31T18:54:53+08:00</updated>
    <id>http://blog.csdn.net/15224936933861.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Shell echo命令</h2>

<h3 id="toc_1">打印字符</h3>

<pre><code>// 下面两行代码效果一致
echo &quot;It is a test&quot;
echo It is a test
</code></pre>

<h3 id="toc_2">打印转义字符</h3>

<pre><code>echo &quot;\&quot;It is a test\&quot;&quot;
// 引号也可以省略
echo \&quot;It is a test\&quot;
</code></pre>

<p>打印结果：</p>

<pre><code>&quot;It is a test&quot;

&quot;It is a test&quot;
</code></pre>

<span id="more"></span><!-- more -->

<h3 id="toc_3">打印 隐藏 换行</h3>

<pre><code>// 显示换行
echo -e &quot;OK! \n&quot; # -e 开启转义
echo &quot;It it a test&quot;
// 不显示换行
echo -e &quot;OK! \c&quot; # -e 开启转义 \c 不换行
echo &quot;It is a test&quot;

</code></pre>

<h3 id="toc_4">显示结果定向至文件</h3>

<pre><code>echo &quot;It is a test&quot; &gt; myfile
</code></pre>

<h3 id="toc_5">原样显示字符 不进行转义</h3>

<pre><code>echo &#39;$name\&quot;&#39;

// 输出结果：  $name\&quot;
</code></pre>

<h2 id="toc_6">录入参数</h2>

<pre><code>read -p &quot;请输入一段文字:&quot; -n 6 -t 5 -s password
echo &quot;\npassword is $password&quot;
</code></pre>

<ul>
<li> -p 输入提示文字</li>
<li>-n 输入字符长度限制(达到6位，自动结束)</li>
<li>-t 输入限时</li>
<li>-s 隐藏输入内容</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天学习一个shell技能（4）]]></title>
    <link href="http://blog.csdn.net/15224613481161.html"/>
    <updated>2018-03-31T09:55:48+08:00</updated>
    <id>http://blog.csdn.net/15224613481161.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">shell基本运算符</h2>

<p>基本使用：</p>

<pre><code>#!/bin/bash

val=`expr 2 + 2`
echo &quot;两数之和为 : $val&quot;
</code></pre>

<ul>
<li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样</li>
<li>完整的表达式要被 ` ` 包含，注意这个字符不是常用的单引号，在 Esc 键下边</li>
</ul>

<span id="more"></span><!-- more -->

<h3 id="toc_1">算术运算符</h3>

<table>
<thead>
<tr>
<th style="text-align: center">运算符</th>
<th style="text-align: center">说明</th>
<th style="text-align: center">举例</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">+</td>
<td style="text-align: center">加法</td>
<td style="text-align: center">`expr $a + $b` 结果为 30。</td>
</tr>
<tr>
<td style="text-align: center">-</td>
<td style="text-align: center">减法</td>
<td style="text-align: center">`expr $a - $b` 结果为 -10。</td>
</tr>
<tr>
<td style="text-align: center">*</td>
<td style="text-align: center">乘法</td>
<td style="text-align: center">`expr $a * $b` 结果为  200。</td>
</tr>
<tr>
<td style="text-align: center">/</td>
<td style="text-align: center">除法</td>
<td style="text-align: center">`expr $b / $a` 结果为 2。</td>
</tr>
<tr>
<td style="text-align: center">%</td>
<td style="text-align: center">取余</td>
<td style="text-align: center">`expr $b % $a` 结果为 0。</td>
</tr>
<tr>
<td style="text-align: center">=</td>
<td style="text-align: center">赋值</td>
<td style="text-align: center">a=$b 将把变量 b 的值赋给 a。</td>
</tr>
<tr>
<td style="text-align: center">==</td>
<td style="text-align: center">相等</td>
<td style="text-align: center">[ \(a == \)b ] 返回 false。</td>
</tr>
<tr>
<td style="text-align: center">!=</td>
<td style="text-align: center">不相等</td>
<td style="text-align: center">[ \(a != \)b ] 返回 true。</td>
</tr>
</tbody>
</table>

<blockquote>
<p>条件表达式要放在方括号之间，并且要有空格，例如: [\(a==\)b] 是错误的，必须写成 [ \(a == \)b ]</p>
</blockquote>

<pre><code>a=10
b=20

val=`expr $a + $b`
echo &quot;a + b : $val&quot;

val=`expr $a - $b`
echo &quot;a - b : $val&quot;

val=`expr $a \* $b`
echo &quot;a * b : $val&quot;

val=`expr $b / $a`
echo &quot;b / a : $val&quot;

val=`expr $b % $a`
echo &quot;b % a : $val&quot;

if [ $a == $b ]
then
   echo &quot;a 等于 b&quot;
fi
if [ $a != $b ]
then
   echo &quot;a 不等于 b&quot;
fi
</code></pre>

<h3 id="toc_2">关系运算符</h3>

<ul>
<li>-eq: 是否等于</li>
<li>-ne: 是否不等于</li>
<li>-gt: 是否大于</li>
<li>-lt: 是否小于</li>
<li>-ge: 是否大于等于</li>
<li>-le: 是否小于等于</li>
</ul>

<hr/>

<blockquote>
<p>EQ 就是 EQUAL等于<br/>
NE 就是 NOT EQUAL不等于 <br/>
GT 就是 GREATER THAN大于　 <br/>
LT 就是 LESS THAN小于 <br/>
GE 就是 GREATER THAN OR EQUAL 大于等于 <br/>
LE 就是 LESS THAN OR EQUAL 小于等于</p>
</blockquote>

<hr/>

<pre><code>a=10
b=20

if [ $a -eq $b ]
then
   echo &quot;$a -eq $b : a 等于 b&quot;
else
   echo &quot;$a -eq $b: a 不等于 b&quot;
fi
if [ $a -ne $b ]
then
   echo &quot;$a -ne $b: a 不等于 b&quot;
else
   echo &quot;$a -ne $b : a 等于 b&quot;
fi
if [ $a -gt $b ]
then
   echo &quot;$a -gt $b: a 大于 b&quot;
else
   echo &quot;$a -gt $b: a 不大于 b&quot;
fi
if [ $a -lt $b ]
then
   echo &quot;$a -lt $b: a 小于 b&quot;
else
   echo &quot;$a -lt $b: a 不小于 b&quot;
fi
if [ $a -ge $b ]
then
   echo &quot;$a -ge $b: a 大于或等于 b&quot;
else
   echo &quot;$a -ge $b: a 小于 b&quot;
fi
if [ $a -le $b ]
then
   echo &quot;$a -le $b: a 小于或等于 b&quot;
else
   echo &quot;$a -le $b: a 大于 b&quot;
fi
</code></pre>

<h3 id="toc_3">布尔运算符</h3>

<ul>
<li>!: 非运算</li>
<li>-o: 或运算</li>
<li>-a: 与运算</li>
</ul>

<h3 id="toc_4">逻辑运算符</h3>

<ul>
<li>&amp;&amp;：与</li>
<li>||：或</li>
</ul>

<h3 id="toc_5">字符串运算</h3>

<pre><code>a=&quot;abc&quot;
b=&quot;efg&quot;

if [ $a = $b ]
then
   echo &quot;$a = $b : a 等于 b&quot;
else
   echo &quot;$a = $b: a 不等于 b&quot;
fi
if [ $a != $b ]
then
   echo &quot;$a != $b : a 不等于 b&quot;
else
   echo &quot;$a != $b: a 等于 b&quot;
fi
if [ -z $a ]
then
   echo &quot;-z $a : 字符串长度为 0&quot;
else
   echo &quot;-z $a : 字符串长度不为 0&quot;
fi
if [ -n $a ]
then
   echo &quot;-n $a : 字符串长度不为 0&quot;
else
   echo &quot;-n $a : 字符串长度为 0&quot;
fi
if [ $a ]
then
   echo &quot;$a : 字符串不为空&quot;
else
   echo &quot;$a : 字符串为空&quot;
fi
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天学习一个shell技能  (3)]]></title>
    <link href="http://blog.csdn.net/15223750607281.html"/>
    <updated>2018-03-30T09:57:40+08:00</updated>
    <id>http://blog.csdn.net/15223750607281.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">shell参数传递</h2>

<p>我们可以在脚本执行时，向脚本传递参数</p>

<pre><code>// 终端运行 脚本，并传入参数
sh testBash.sh 0 1 2

echo &quot;Shell 传递参数实例！&quot;

echo &quot;\$0 =&gt; $0&quot;

echo &quot;\$1 =&gt; $1&quot;
</code></pre>

<p>打印结果：</p>

<pre><code>Shell 传递参数实例！
$0 =&gt; testBash.sh
$1 =&gt; 0
</code></pre>

<span id="more"></span><!-- more -->

<table>
<thead>
<tr>
<th style="text-align: center">参数处理</th>
<th style="text-align: center">参数说明</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">$#</td>
<td style="text-align: center">传递到脚本的参数个数</td>
</tr>
<tr>
<td style="text-align: center">$*</td>
<td style="text-align: center">以一个单字符串显示所有向脚本传递的参数</td>
</tr>
<tr>
<td style="text-align: center">$$</td>
<td style="text-align: center">脚本运行的当前进程ID号</td>
</tr>
<tr>
<td style="text-align: center">$!</td>
<td style="text-align: center">后台运行的最后一个进程的ID号</td>
</tr>
<tr>
<td style="text-align: center">$@</td>
<td style="text-align: center">与$*相同，但是使用时加引号，并在引号中返回每个参数</td>
</tr>
<tr>
<td style="text-align: center">$-</td>
<td style="text-align: center">显示Shell使用的当前选项</td>
</tr>
<tr>
<td style="text-align: center">$?</td>
<td style="text-align: center">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误</td>
</tr>
</tbody>
</table>

<pre><code>// 运行脚本
sh testBash.sh 0 1 2
</code></pre>

<pre><code>echo &quot;\$0 =&gt; $0&quot;

echo &quot;\$1 =&gt; $1&quot;

echo &quot;\$@ =&gt; $@&quot;

echo &quot;\$* =&gt; $*&quot;

echo &quot;\$\$ =&gt; $$&quot;

echo &quot;\$! =&gt; $!&quot;

echo &quot;\$- =&gt; $-&quot;

echo &quot;\$? =&gt; $?&quot;

echo &quot;\$*传递的参数作为一个字符串显示：$*&quot;

echo &quot;\$@是作为一个数组返回 =&gt; $@&quot;
</code></pre>

<p>打印结果：</p>

<pre><code>$0 =&gt; testBash.sh
$1 =&gt; 0
$@ =&gt; 0 1 2
$* =&gt; 0 1 2
$$ =&gt; 18859
$! =&gt; 
$- =&gt; hB
$? =&gt; 0
$*传递的参数作为一个字符串显示：0 1 2
$@是作为一个数组返回 =&gt; 0 1 2
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天学习一个shell 技能 （2）]]></title>
    <link href="http://blog.csdn.net/15223210751913.html"/>
    <updated>2018-03-29T18:57:55+08:00</updated>
    <id>http://blog.csdn.net/15223210751913.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Shell 数组</h2>

<h3 id="toc_1">定义数组</h3>

<pre><code class="language-bash">array_name=(value1 value2 value3)

array_name2=(
value1
value2
value3
)

// 单独定义某个分量的值
array_name(0)=value0
</code></pre>

<span id="more"></span><!-- more -->

<h3 id="toc_2">读取数组</h3>

<pre><code>// 读取单个元素
value0=${array_name[0]}

//使用@符号可以获取数组中的所有元素
echo ${array_name(@)}

</code></pre>

<h3 id="toc_3">获取数组的长度</h3>

<pre><code>// 获取元素个数
length=${#array_name[@]}

//或者
length=${#array_name[*]}

// 获取的单个元素的长度
item_length=${#array_name[n]}
</code></pre>

<h2 id="toc_4">Shell 注释</h2>

<blockquote>
<p>以&quot;#&quot;开头的行就是注释，会被解释器忽略。sh里没有多行注释，只能每一行加一个#号。只能像这样</p>
</blockquote>

<pre><code>#--------------------------------------------
# 这是一个注释
# author：菜鸟教程
# site：www.runoob.com
# slogan：学的不仅是技术，更是梦想！
#--------------------------------------------
##### 用户配置区 开始 #####
#
#
# 这里可以添加脚本描述信息
# 
#
##### 用户配置区 结束  #####
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[源码阅读 -- YYModel （一）]]></title>
    <link href="http://blog.csdn.net/15181411526837.html"/>
    <updated>2018-02-09T09:52:32+08:00</updated>
    <id>http://blog.csdn.net/15181411526837.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Block 知识点拾遗]]></title>
    <link href="http://blog.csdn.net/15200726964422.html"/>
    <updated>2018-03-03T18:24:56+08:00</updated>
    <id>http://blog.csdn.net/15200726964422.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>Block为什么要用copy</p>

<ul>
<li>block在创建的时候默认分配的内存是在栈上，而不是在堆上。这样的话其本身的作用域是属于创建时候的作用域，一旦在创建的作用域之外调用就会导致程序的崩溃。所以使用了copy将其拷贝到堆内存上。</li>
<li>block创建在栈上，而block的代码中可能会用到本地的一些变量，只有将其拷贝到堆上，才能用这些变量</li>
</ul></li>
<li><p>Block为什么不用retain</p>

<ul>
<li>retain只是增加了一次引用计数，block的内存还是在栈上，并没有存在堆上，存在栈上的block可能随时被系统回收</li>
</ul></li>
<li><p>为什么进入block中的对象引用计数需要自动加1？</p>

<ul>
<li>Block执行的是回调，因此block并不知道其中的对象obj创建后会在什么时候被释放，为了不在block使用obj之前，对象已经被释放，block就retain了obj一次</li>
</ul></li>
<li><p>block和函数的关系</p>

<ul>
<li>Block的使用很<strong>像函数指针</strong>，不过与函数最大的不同是Block可以访问函数以外、词法作用域以内的外部变量的值。换句话说，Block不仅 实现函数的功能，还能<strong>携带函数的执行环境</strong>。</li>
<li>函数指针 <code>void(*fun)(int)</code></li>
<li>block <code>void(^fun)(int)</code></li>
</ul></li>
<li><p>block本质（对于block的理解）<a href="https://www.cnblogs.com/yoon/p/4953618.html">请查阅Block实现原理</a></p>

<ul>
<li>block实际上是: 指向结构体的指针</li>
<li>编译器会将block的内部代码生成对应的函数</li>
</ul></li>
<li><p>对于基本数据类型，进入到block中会被当做常量处理。对象 retain 会一次</p>

<span id="more"></span><!-- more -->

<pre><code>//如果需要在block中对num进行修改，需要加上关键字__block
//(我们也可以用static关键字进行修饰)
int  num1 = 10;
void(^block1)() = ^{
   NSLog(@&quot;num1 is %d&quot;,num1);
};
num1 = 20;
block1(); //输出10

//改进:使用block,使进入到block块中的变量不被当做常量来使用
__block int  num2 = 10;
void(^block2)() = ^{
 NSLog(@&quot;num2 is %d&quot;,num2);
};
num2 = 20;
block2(); //输出20
</code></pre></li>
<li><p>Block中self的循环引用</p>

<ul>
<li>block默认创建在栈上，所以对要对其进行执行copy操作，将其拷贝到堆区，便于更好的操作对象。但是执行了copy操作之后，block中使用self，此对象会被retain一次（注意：block在堆区上时才会起到retain作用），会造成循环引用。</li>
<li>解决方法：

<ul>
<li>在MRC下，使用__block修饰</li>
<li>在ARC下，使用__unsafe_unretained\weak修饰</li>
</ul></li>
</ul></li>
<li><p>Block 在内存中的分类</p>

<ul>
<li>全局block --&gt; GlobalBlock &lt;==&gt; 相当于全局变量, 系统会自动释放</li>
<li>栈block --&gt; StackBlock &lt;==&gt; 相当于局部变量, 系统会自动释放</li>
<li>堆block --&gt; MallocBlock &lt;==&gt; (需要手动释放内存)</li>
</ul></li>
<li><p>block类型区分方法</p>

<ul>
<li>如果block实现中没有访问任何&quot;外部&quot;变量(包括局部和全局), 该block为GlobalBlock</li>
<li>如果block实现中访问了任何&quot;外部&quot;变量(包括局部和全局), 该block为StackBlock</li>
<li>对StackBlock进行拷贝(copy/Block_copy), 该block为MallocBlock</li>
</ul></li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天学习一个shell技能 （1）]]></title>
    <link href="http://blog.csdn.net/15223028228569.html"/>
    <updated>2018-03-29T13:53:42+08:00</updated>
    <id>http://blog.csdn.net/15223028228569.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">准备</h2>

<p>bash 环境位置</p>

<pre><code>#!/bin/bash
</code></pre>

<p><code>#!</code> 一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell</p>

<span id="more"></span><!-- more -->

<h2 id="toc_1">运行shell</h2>

<ol>
<li><p>作为可执行程序</p>

<pre><code class="language-shell">chmod +x ./mybash.sh
./mybash.sh
</code></pre></li>
<li><p>作为解释器参数</p></li>
</ol>

<pre><code>/bin/bash test.sh
/bin/php test.php
// 如果这样运行，文件内的第一行就可以不需要指定 解释器信息了
</code></pre>

<h2 id="toc_2">pwd</h2>

<ol>
<li><p>命令简介</p>

<p><code>pwd</code> ：打印当前目录 ，命令以 <code>绝对路径</code> 的形式显示用户的  当前工作目录</p></li>
<li><p>用法</p>

<p><code>pwd    [-LP]</code></p></li>
</ol>

<h2 id="toc_3">变量</h2>

<h3 id="toc_4">定义变量</h3>

<ul>
<li>定义变量时 不需要制定 <code>$</code>符号</li>
<li>变量名和值、等号之间不能有空格</li>
</ul>

<p><strong>命名规范:</strong></p>

<ul>
<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头</li>
<li>中间不能有空格，可以使用下划线（_）</li>
<li>不能使用标点符号</li>
<li>不能使用bash里的关键字（可用help命令查看保留关键字）</li>
</ul>

<pre><code class="language-shell">user_name=&#39;kael linda&#39;
</code></pre>

<h3 id="toc_5">使用变量</h3>

<p>使用时，变量名前面加上<code>$</code>符号即可</p>

<pre><code>your_name=&quot;qinjx&quot;
echo $your_name
echo ${your_name}
</code></pre>

<p>花体括号 加不加都行，视情况而定。<br/>
加是为了区分变量边界</p>

<pre><code>user_name=&quot;kaelinda&quot;
echo  &quot;I&#39;m ${user_name}&#39; brother&quot;
</code></pre>

<h3 id="toc_6">只读变量</h3>

<pre><code>user_name=&quot;kaelinda&quot;
readonly user_name
user_name=&quot;kael&quot;
</code></pre>

<h3 id="toc_7">删除变量</h3>

<pre><code>unset variable_name
</code></pre>

<ul>
<li>删除变量删除之后的变量不可再使用</li>
<li>unset 命令不能删除只读变量</li>
</ul>

<h3 id="toc_8">变量类型</h3>

<ul>
<li>局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li>
<li>环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li>
<li>shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li>
</ul>

<h2 id="toc_9">shell 字符串</h2>

<h3 id="toc_10">单引号</h3>

<pre><code>str=&#39;this is a string&#39;
</code></pre>

<ul>
<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li>
<li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li>
</ul>

<h3 id="toc_11">双引号</h3>

<pre><code>your_name=&#39;qinjx&#39;
str=&quot;Hello, I know your are \&quot;$your_name\&quot;! \n&quot;
</code></pre>

<ul>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>

<h3 id="toc_12">拼接字符串</h3>

<pre><code>your_name=&quot;qinjx&quot;
greeting=&quot;hello, &quot;$your_name&quot; !&quot;
greeting_1=&quot;hello, ${your_name} !&quot;
</code></pre>

<h3 id="toc_13">获取字符串长度</h3>

<pre><code>string=&quot;abcd&quot;
echo ${#string} #输出 4
</code></pre>

<h3 id="toc_14">提取字符串</h3>

<pre><code>string=&quot;runoob is a great site&quot;
echo ${string:1:4} # 输出 unoo
</code></pre>

<h3 id="toc_15">查找字符串位置</h3>

<pre><code>string=&quot;runoob is a great company&quot;
echo `expr index &quot;$string&quot; is`  # 输出 8
</code></pre>

<blockquote>
<p>以上脚本中 &quot;`&quot; 是反引号，而不是单引号 &quot;&#39;&quot;，不要看错了.  这是用了正则表达式匹配字符</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS GCD&&多线程]]></title>
    <link href="http://blog.csdn.net/15222179789382.html"/>
    <updated>2018-03-28T14:19:38+08:00</updated>
    <id>http://blog.csdn.net/15222179789382.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">基础篇</h2>

<h3 id="toc_1">GCD用途</h3>

<blockquote>
<p>GCD 是 Grand Central Dispatch 的缩写。</p>
</blockquote>

<ul>
<li>GCD 可用于多核的并行运算</li>
<li>GCD 会自动利用更多的 CPU 内核（比如双核、四核）</li>
<li>GCD 会自动管理线程的生命周期（创建线程、调度任务、销毁线程）</li>
<li>程序员只需要告诉 GCD 想要执行什么任务，不需要编写任何线程管理代码</li>
</ul>

<span id="more"></span><!-- more -->

<h3 id="toc_2">GCD 任务和队列</h3>

<ul>
<li><p>任务：就是要执行的操作，要做的事情，要执行的代码块，比如GCD中Block代码块</p>

<ul>
<li><p>同步执行：</p>

<ul>
<li>会 <strong>等待</strong> 队列前面的任务完成后继续往下执行， </li>
<li>只能在 <strong>当前线程</strong> 中执行，</li>
<li>不具备 <strong>开辟新线程的能力</strong></li>
</ul></li>
<li><p>异步执行：</p>

<ul>
<li>不等待</li>
<li>具备开辟新线程的能力，可以开辟线程执行任务，也可以不开辟新线程</li>
</ul></li>
</ul></li>
<li><p>队列：一种特殊的线性表，采用 FIFO（先进先出）的原则</p>

<ul>
<li><p>串行队列：每次只有一个任务被执行。让任务一个接着一个地执行。（只开启一个线程，一个任务执行完毕后，再执行下一个任务）</p></li>
<li><p>并发队列：可以让多个任务并发（同时）执行。（可以开启多个线程，并且同时执行任务）</p></li>
</ul></li>
</ul>

<blockquote>
<p>并发队列的并发功能只有在异步（dispatch_async）函数下才有效<br/>
如果并发队列再同步函数下，依旧会按顺序执行，并没能体现出并发功能</p>
</blockquote>

<h3 id="toc_3">GCD 使用</h3>

<h4 id="toc_4">GCD 步骤</h4>

<ol>
<li>创建队列（串行队列或者并行队列）</li>
<li>将任务追加到队列中</li>
</ol>

<h4 id="toc_5">队列的创建</h4>

<ul>
<li><p>串行队列的创建方法</p>

<pre><code>dispatch_queue_t queue = dispatch_queue_create(&quot;net.bujige.testQueue&quot;, DISPATCH_QUEUE_SERIAL);
</code></pre></li>
<li><p>并发队列的创建方法</p>

<pre><code>dispatch_queue_t queue = dispatch_queue_create(&quot;net.bujige.testQueue&quot;, DISPATCH_QUEUE_CONCURRENT);
</code></pre></li>
<li><p>主队列的获取方法</p>

<pre><code>dispatch_queue_t queue = dispatch_get_main_queue();
</code></pre>

<p><strong>划重点： 所有放在主队列中的任务，都会放到主线程中执行!!!!!!!!</strong></p></li>
<li><p>全局并发队列创建</p>

<pre><code>/**
* 默认并发队列
* DISPATCH_QUEUE_PRIORITY_DEFAULT 默认优先级
* 第二个参数没什么用（预留字段） 默认0
*/

dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
</code></pre></li>
</ul>

<h4 id="toc_6">任务的创建</h4>

<ul>
<li>同步执行任务创建方法</li>
</ul>

<pre><code>dispatch_sync(queue, ^{
    // 这里放同步执行任务代码
});
</code></pre>

<ul>
<li>异步执行任务创建方法</li>
</ul>

<pre><code>dispatch_async(queue, ^{
    // 这里放异步执行任务代码
});
</code></pre>

<table>
<thead>
<tr>
<th style="text-align: center">区别</th>
<th style="text-align: center">并发队列</th>
<th style="text-align: center">串行队列</th>
<th style="text-align: center">主队列</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">同步(sync)</td>
<td style="text-align: center">当前线程，串行执行</td>
<td style="text-align: center">当前线程，串行执行</td>
<td style="text-align: center">死锁</td>
</tr>
<tr>
<td style="text-align: center">异步(async)</td>
<td style="text-align: center">能开辟新线程(多个)，并发执行任务</td>
<td style="text-align: center">新线程(一个)中执行，串行执行任务</td>
<td style="text-align: center">为开辟新线程，串行执行任务</td>
</tr>
</tbody>
</table>

<h3 id="toc_7">GCD 基本使用</h3>

<ul>
<li><p>同步 串行</p>

<blockquote>
<p>所有任务都是在当前线程（主线程）中执行的，并没有开启新的线程（同步执行不具备开启新线程的能力）。<br/>
所有任务都在打印的syncConcurrent---begin和syncConcurrent---end之间执行（同步任务需要等待队列的任务执行结束）。<br/>
任务是按顺序执行的（串行队列每次只有一个任务被执行，任务一个接一个按顺序执行）。</p>
</blockquote></li>
<li><p>同步 并发</p>

<blockquote>
<p>所有任务都是在当前线程（主线程）中执行的，没有开启新的线程（同步执行不具备开启新线程的能力）。<br/>
所有任务都在打印的syncConcurrent---begin和syncConcurrent---end之间执行的（同步任务需要等待队列的任务执行结束）。<br/>
任务按顺序执行的。按顺序执行的原因：虽然并发队列可以开启多个线程，并且同时执行多个任务。但是因为本身不能创建新线程，只有当前线程这一个线程（同步任务不具备开启新线程的能力），所以也就不存在并发。而且当前线程只有等待当前队列中正在执行的任务执行完毕之后，才能继续接着执行下面的操作（同步任务需要等待队列的任务执行结束）。所以任务只能一个接一个按顺序执行，不能同时被执行。</p>
</blockquote></li>
<li><p>异步 串行</p>

<blockquote>
<p>开启了一条新线程（异步执行具备开启新线程的能力，串行队列只开启一个线程）。<br/>
所有任务是在打印的syncConcurrent---begin和syncConcurrent---end之后才开始执行的（异步执行不会做任何等待，可以继续执行任务）。<br/>
任务是按顺序执行的（串行队列每次只有一个任务被执行，任务一个接一个按顺序执行）。</p>
</blockquote></li>
<li><p>异步 并发</p>

<blockquote>
<p>除了当前线程（主线程），系统又开启了3个线程，并且任务是交替/同时执行的。（异步执行具备开启新线程的能力。且并发队列可开启多个线程，同时执行多个任务）。<br/>
所有任务是在打印的syncConcurrent---begin和syncConcurrent---end之后才执行的。说明当前线程没有等待，而是直接开启了新线程，在新线程中执行任务（异步执行不做等待，可以继续执行任务）。</p>
</blockquote></li>
<li><p>同步 主队列</p>

<blockquote>
<p>在不同线程中调用结果也是不一样，在主线程中调用会出现死锁，而在其他线程中则不会。</p>
</blockquote></li>
<li><p>异步 主队列</p>

<blockquote>
<p>所有任务都是在当前线程（主线程）中执行的，并没有开启新的线程（虽然异步执行具备开启线程的能力，但因为是主队列，所以所有任务都在主线程中）。<br/>
所有任务是在打印的syncConcurrent---begin和syncConcurrent---end之后才开始执行的（异步执行不会做任何等待，可以继续执行任务）。<br/>
任务是按顺序执行的（因为主队列是串行队列，每次只有一个任务被执行，任务一个接一个按顺序执行）。</p>
</blockquote></li>
</ul>

<h3 id="toc_8">GCD 其他操作</h3>

<h4 id="toc_9">栅栏函数</h4>

<ul>
<li>栅栏函数：<code>dispatch_barrier_async</code> </li>
</ul>

<blockquote>
<p>先执行barrier之前的任务，再执行barrier任务,最后执行barrier之后的任务</p>
</blockquote>

<h4 id="toc_10">延时</h4>

<ul>
<li><p>延时函数：<code>dispatch_after</code></p>

<pre><code>dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
    // 2.0秒后异步追加任务代码到主队列，并开始执行
    NSLog(@&quot;after---%@&quot;,[NSThread currentThread]);  // 打印当前线程
});
</code></pre></li>
</ul>

<h4 id="toc_11">一次性代码</h4>

<ul>
<li><p>一次性代码</p>

<pre><code>static dispatch_once_t onceToken;
dispatch_once(&amp;onceToken, ^{
    // 只执行1次的代码(这里面默认是线程安全的)
});
</code></pre></li>
</ul>

<h4 id="toc_12">快速迭代</h4>

<ul>
<li>GCD 快速迭代 <code>dispatch_apply</code></li>
</ul>

<pre><code>dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    
    NSLog(@&quot;apply---begin&quot;);
    dispatch_apply(6, queue, ^(size_t index) {
        NSLog(@&quot;%zd---%@&quot;,index, [NSThread currentThread]);
    });\
</code></pre>

<h4 id="toc_13">队列组</h4>

<ul>
<li>队列组 <code>dispatch_group</code></li>
</ul>

<pre><code>dispatch_group_async
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS APP性能优化方向分析]]></title>
    <link href="http://blog.csdn.net/15193931556096.html"/>
    <updated>2018-02-23T21:39:15+08:00</updated>
    <id>http://blog.csdn.net/15193931556096.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">网络性能</h2>

<ul>
<li>减少不必要的网络请求</li>
<li>server端数据查询算法优化</li>
<li>DNS解析</li>
</ul>

<h2 id="toc_1">内存性能</h2>

<ul>
<li>各种循环引用 导致内存泄漏</li>
<li>Core Animation 对象手动释放</li>
<li>UIWebView 内存泄漏</li>
</ul>

<h2 id="toc_2">主线程阻塞</h2>

<ul>
<li>网络同步请求</li>
<li>I/O操作</li>
<li>大量运算</li>
<li>解压、压缩
...</li>
</ul>

<h2 id="toc_3">离屏渲染</h2>

<p>离屏渲染：GPU在当前缓存区之外另外的去开辟空间进行渲染，同样的一帧图片 会被渲染两次甚至多次</p>

<p>：uiview.layer.cornerRadius 系统方法切圆角---&gt;&gt;解决方案：Runtime + 画图</p>

<h2 id="toc_4">图片处理</h2>

<ul>
<li>imageWithName：加载到缓存中可重复使用</li>
<li>initWithContentsOfFile: 加载一次不会存到缓存中</li>
</ul>

<h2 id="toc_5">其他</h2>

<ul>
<li>加速启动</li>
<li>避免日期格式的转换</li>
</ul>

<h3 id="toc_6">优化瀑布流中 网络图片 加载导致UI卡顿问题</h3>

<blockquote>
<p>1、异步下载图片<br/>
2、异步加载图片成二进制 NSData  （<strong>这一步是关键</strong>） <br/>
3、UIImageView 加载二进制形式的NSData</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 离屏渲染]]></title>
    <link href="http://blog.csdn.net/15200715202464.html"/>
    <updated>2018-03-03T18:05:20+08:00</updated>
    <id>http://blog.csdn.net/15200715202464.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">触发方式</h2>

<p>设置以下方式会触发离屏渲染：</p>

<ul>
<li>shouldRasterize（光栅化）</li>
<li>masks（遮罩）</li>
<li>shadows（阴影）</li>
<li>edge antialiasing（抗锯齿）</li>
<li>group opacity（不透明）</li>
<li>复杂形状设置圆角等</li>
<li>渐变 </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 面试题总结]]></title>
    <link href="http://blog.csdn.net/15198022156700.html"/>
    <updated>2018-02-28T15:16:55+08:00</updated>
    <id>http://blog.csdn.net/15198022156700.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">基础篇</h2>

<h3 id="toc_1">内存管理 ：assign copy strong weak...</h3>

<ul>
<li>简述OC中内存管理机制,与retain配对使用的方法是dealloc还是release，为什么？</li>
</ul>

<blockquote>
<p>管理机制：<br/>
  使用了一种叫做 <strong>引用计数</strong> 的机制来管理内存中的对象。OC中每个对象都对应着他们自己的引用计数，引用计数可以理解为一个整数计数器，当使用alloc方法创建对象的时候，持有计数会自动设置为1。当你向一个对象发送retain消息 时，持有计数数值会增加1。相反，当你像一个对象发送release消息时，持有计数数值会减小1。当对象的持有计数变为0的时候，对象会释放自己所占用的内存</p>
</blockquote>

<ul>
<li><p>修饰词的作用</p>

<ul>
<li>retain(引用计数加1)-&gt;release（引用计数减1）</li>
<li>alloc（申请内存空间）-&gt;dealloc(释放内存空间)</li>
<li>readwrite: 表示既有getter，也有setter   (默认)</li>
<li>readonly: 表示只有getter，没有setter</li>
<li>nonatomic:不考虑线程安全</li>
<li>atomic:线程操作安全   （默认）</li>
<li>retain: release旧的对象，将旧对象的值赋予输入对象，再提高输入对象的索引计数为1</li>
<li>assign: 简单赋值，不更改索引计数    （默认）</li>
<li>copy: 其实是建立了一个相同的对象,地址不同（retain：指针拷贝  copy：内容拷贝）</li>
<li>strong:（ARC下的）和（MRC）retain一样    （默认）</li>
<li>weak:（ARC下的）和（MRC）assign一样， weak当指向的内存释放掉后自动nil化，防止野指针</li>
<li>unsafe_unretained 声明一个弱引用，但是不会自动nil化，也就是说，如果所指向的内存区域被释放了，这个指针就是一个野指针了。 autoreleasing 用来修饰一个函数的参数，这个参数会在函数返回的时候被自动释放。
### .类变量的@protected ,@private,@public,@package，声明各有什么含义？</li>
</ul></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 项目组件化]]></title>
    <link href="http://blog.csdn.net/15193944679783.html"/>
    <updated>2018-02-23T22:01:07+08:00</updated>
    <id>http://blog.csdn.net/15193944679783.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">组件化需要解决的问题</h2>

<ul>
<li>APP 如何跳到任意指定界面（APP外部跳转，APP内部跳转）</li>
<li>自家APP之间如何相互跳转 </li>
<li>如何降低APP组件和APP界面之间的耦合度</li>
<li>如何动态下发配置文件；iOS 安卓共用配置文件</li>
<li>AOP统计界面跳转</li>
<li>组件之间通信，组件和界面之间通信</li>
</ul>

<h2 id="toc_1">组件化步骤</h2>

<ul>
<li>拆分UI组件</li>
<li>拆分业务组件</li>
<li>组件管理</li>
<li>组件通信</li>
</ul>

<h2 id="toc_2">组件化架构 &amp;&amp; 思路</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DLNA DMR]]></title>
    <link href="http://blog.csdn.net/15174544275720.html"/>
    <updated>2018-02-01T11:07:07+08:00</updated>
    <id>http://blog.csdn.net/15174544275720.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">CGUpnpAvRenderer</h2>

<pre><code>#if !defined(_CG_CLINKCAV_MEDIARENDERER_H_)
typedef void CgUpnpAvRenderer;
#endif

/**
 * The CGUpnpAvRenderer class is a UPnP/AV media server class.
 */
@interface CGUpnpAvRenderer : CGUpnpDevice
{
    CgUpnpAvRenderer *cAvObject;
}
@property(readonly) CgUpnpAvRenderer *cAvObject;
- (id)init;
- (id)initWithCObject:(CgUpnpDevice *)cobj;
- (BOOL)setAVTransportURI:(NSString *)aURI;
- (BOOL)play;
- (BOOL)stop;
- (BOOL)pause;
- (BOOL)next;
- (BOOL)previous;
- (BOOL)seek:(float)absTime;
- (BOOL)isPlaying;
/*
- (BOOL)start
- (BOOL)stop
*/
- (CGUpnpAVPositionInfo *)positionInfo;
</code></pre>

<h2 id="toc_1">CGUpnpDevice</h2>

<pre><code>/**
 * The CGUpnpDevice class is a wrapper class for CgUpnpDevice of CyberLink for C.
 */
// 设备包装类
@protocol CGUpnpDeviceDelegate &lt;NSObject&gt;
@optional
// 收到Action的协议方法
- (BOOL)device:(CGUpnpDevice *)device service:(CGUpnpService *)service actionReceived:(CGUpnpAction *)action;
@end

/**
 * The CGUpnpDevice class is a wrapper class for CgUpnpDevice of CyberLink for C.
 */
@interface CGUpnpDevice : NSObject 
{
    BOOL isCObjectCreated;
}
@property(assign) CgUpnpDevice *cObject;
@property(assign) id&lt;CGUpnpDeviceDelegate&gt; delegate;
/**
 * Create a new UPnP device.
 * 
 * @return New instance if successfull; otherwise nil.
 */
 // 初始化方法 创建一个新的UPnP设备
- (id) init;
/**
 * Create a new UPnP device with the C instance.
 * 
 * @return New instance if successfull; otherwise nil.
 */
 // 用一个设备初始化另一设备
- (id) initWithCObject:(CgUpnpDevice *)cobj;
/**
 * Create a new UPnP device with the XML descriptioin.
 * 
 * @return New instance if successfull; otherwise nil.
 */
 // xml  创建设备
- (id) initWithXMLDescription:(NSString *)xmlDesc;
/**
 * Parse the specified XML description.
 * 
 * @return YES if successfull; otherwise nui.
 */
- (BOOL) parseXMLDescription:(NSString *)xmlDesc;
/**
 * Get the friendly name of the device.
 * 
 * @return Friendly name.
 */
// 获取友好的名字
- (NSString *)friendlyName;
/**
 * Get the device type of the device.
 * 
 * @return Device Type.
 */
 // 设备类型
- (NSString *)deviceType;
/**
 * Get the UDN of the device.
 * 
 * @return UDN of the specified device.
 */
 // 获取设备的UDN
- (NSString *)udn;
/**
 * Return a manufacture.
 *
 * @return Manufacture of the device.
 */
 // 制造商
- (NSString *)manufacturer;

/**
 * Return a model number.
 *
 * @return Model number of the device.
 */
 // 返回模型数
- (NSString *)modelNumber;

/**
 * Return a model name.
 *
 * @return Model name of the device.
 */
 // 返回模型名
- (NSString *)modelName;

/**
 * Return a urlBase
 *
 * @return URLBase of the device.
 */
 // 返回设备的URLBase
- (NSString *)urlBase;
/**
 * Return a descrition URL
 *
 * @return Descripton URL of the device.
 */
 // 返回设备URL描述
- (NSString *)descriptionURL;
/**
 * Return a location URL
 *
 * @return Location URL of the device.
 */
 // 返回一个本地URL
- (NSString *)locationURL;
/**
 * Set a device type of the device.
 * 
 * @param aType Device type to set.
 */
 // 设置设备类型
-(void)setDeviceType:(NSString *)aType;
/**
 * Set a friendly name of the device.
 * 
 * @param aName Friendly name to set.
 */
 // 设置友好名称
-(void)setFriendlyName:(NSString *)aName;
/**
 * Set a udn of the device.
 * 
 * @param aUdn UDN to set.
 */
-(void)setUdn:(NSString *)aUdn;
/**
 * Check whether the device type is the specified type.
 *
 * @param aType A type string of the device.
 * 
 * @return YES if the specified type is same as the device type; otherwise NO.
 */
- (BOOL)isDeviceType:(NSString *)aType;
/**
 * Check whether the device&#39;s UDN is the specified UDN.
 *
 * @param aUDN A UDN string of the device.
 * 
 * @return YES if the specified UDN is same as the device&#39; UDN; otherwise NO.
 */
- (BOOL)isUDN:(NSString *)aUDN;
/**
 * Check whether the device&#39;s friendly name is the specified name.
 *
 * @param aFriendlyName A friendly name string of the device.
 * 
 * @return YES if the specified friendly name is same as the device&#39; friendly name; otherwise NO.
 */
- (BOOL)isFriendlyName:(NSString *)aFriendlyName;
/**
 * Return a presentationURL
 *
 * @return presentationURL of the device.
 */
- (NSString *)presentationURL;
/**
 * Get all services in the device as a NSArray object. The array has the services as instances of CGUpnpService.
 *
 * @return NSArray of CGUpnpService.
 */
 // 返回设备CGUpnpService服务组
- (NSArray *)services;
/**
 * Get a service in the device by the specified service ID.
 *
 * @param serviceId A service ID string of the service.
 *
 * @return The CGUpnpService if the specified service is found; otherwise nil.
 */
 // 根据seviceID 获取服务对象
- (CGUpnpService *)getServiceForID:(NSString *)serviceId;
/**
 * Get a service in the device by the specified service type.
 *
 * @param serviceType A service type string of the service.
 *
 * @return The CGUpnpService if the specified service is found; otherwise nil.
 */
 // 根据类型获取服务对象 service
- (CGUpnpService *)getServiceForType:(NSString *)serviceType;
/**
 * Get all icons in the device as a NSArray object. The array has the services as instances of CGUpnpIconIcon.
 *
 * @return NSArray of CGUpnpIcon.
 */
 // 获取所有图标
- (NSArray *)icons;
/**
 * Start the device.
 *
 * @return YES if the device is started normally, otherwise NO.
 */
- (BOOL)start;
/**
 * Stop the device.
 *
 * @return YES if the device is started normally, otherwise NO.
 */
- (BOOL)stop;
/**
 * Check if the controll point is running.
 *
 * @return YES if the device is started normally, otherwise NO.
 */
 //检查控制点 DMC是否在运行
- (BOOL)isRunning;
/**
 * Announce the device.
 *
 * @return YES if the device is started normally, otherwise NO.
 */
 // 广播这个设备
- (BOOL)announce;
/**
 * Set a user data.
 *
 * @param aUserData A user data to set.
 *
 * @return The CGUpnpService if the specified service is found; otherwise nil.
 */
 // 设置用户数据
- (void)setUserData:(void *)aUserData;
/**
 * Get a stored user data.
 *
 * @return A stored user data.
 */
 获取已存储的用户数据
- (void *)userData;
/**
 * Return a IP address.
 *
 * @return IP address of the device.
 */
 // 获取IP地址
- (NSString *)ipaddress;
/**
 * Return a most smallest icon.
 *
 * @return Smallest Icon.
 */
 // 获取一个最小的 icon
- (CGUpnpIcon *)smallestIcon;
/**
 * Return a most smallest icon with a specified mime type.
 *
 * @return Smallest Icon.
 */
 // 获取指定类型的icon
- (CGUpnpIcon *)smallestIconWithMimeType:(NSString *)mimeType;
/**
 * Return a absolute url of the specified icon.
 *
 * @param anIcon Icon.
 *
 * @return Absolute url of the specified icon.
 */
 // 获取icon的绝对路径
- (NSString *)absoluteIconUrl:(CGUpnpIcon *)anIcon;
</code></pre>

<h2 id="toc_2">CGUpnpStateVariable</h2>

<pre><code>#if !defined(_CG_UPNP_CSTATEVARIABLE_H_)
typedef void CgUpnpStateVariable;
#endif

/**
 * The CGUpnpStateVariable class is a wrapper class for CgUpnpStateVariable of CyberLink for C.
 */
@interface CGUpnpStateVariable : NSObject 
{
    CgUpnpStateVariable *cObject;
}
@property(readonly) CgUpnpStateVariable *cObject;
- (id)initWithCObject:(CgUpnpStateVariable *)cobj;
/**
 * Get the name of the state variable.
 * 
 * @return The name.
 */
 // 状态名
- (NSString *)name;
/**
 * Get the value of the state variable.
 * 
 * @return The value.
 */
 // 状态值
- (NSString *)value;

/**
 * Get an array of the allowed values for the state variable
 * 
 * @return The array.
 */
 // 允许的所有状态值
- (NSArray *)allowedValues;

/**
 * Checks whether value is allowed for this state variable
 *
 * @param value to be checked
 *
 * @return YES if true
 */
 // 检测状态值是否是被允许的
- (BOOL)isAllowedValue:(NSString*)value;

/**
 * Send query
 *
 * @return YES if successfull; otherwise NO
 */
- (BOOL)query;
/**
 * Get a states code of the last query. 
 *
 * @return The status code
 */
- (NSInteger)statusCode;
</code></pre>

<h2 id="toc_3">CGUpnpIcon</h2>

<pre><code>/**
 * The CGUpnpIcon class is a wrapper class for CgUpnpIcon of CyberLink for C.
 */
@interface CGUpnpIcon : NSObject
{
    CgUpnpIcon *cObject;
#if defined(TARGET_OS_IPHONE)
    NSString *resourceName;
#endif
}
@property(readonly) CgUpnpIcon *cObject;
#if defined(TARGET_OS_IPHONE)
@property(readonly) NSString *resourceName;
#endif
- (id)initWithCObject:(CgUpnpIcon *)cobj;
/**
 * Get the url of the icon.
 * 
 * @return The url.
 */
- (NSString *)url;
/**
 * Get the url of the width.
 * 
 * @return The width.
 */
- (NSInteger)width;
/**
 * Get the height of the icon.
 * 
 * @return The height.
 */
- (NSInteger)height;
/**
 * Get the depth of the icon.
 * 
 * @return The depth.
 */
- (NSInteger)depth;
#if defined(TARGET_OS_IPHONE)
- (void)setResourceName:(NSString *) aResourceName;
#endif
</code></pre>

<h2 id="toc_4">CGUpnpAVPositionInfo</h2>

<pre><code>@property(retain) CGUpnpAction *upnpAction;
-(id)initWithAction:(CGUpnpAction *)aUpnpAction;
-(float)trackDuration;
-(float)absTime;
-(float)relTime;
@end

@interface NSString(CGUPnPAV)
// 总时长字符串
+(NSString *)stringWithDurationTime:(float)timeValue;
// 总时长
- (float)durationTime;
</code></pre>

<h2 id="toc_5">CGUpnpAction</h2>

<pre><code>@interface CGUpnpAction : NSObject 
{
    CgUpnpAction *cObject;
}
@property(readonly) CgUpnpAction *cObject;
- (id)initWithCObject:(CgUpnpAction *)cobj;
/**
 * Get the name of the action.
 * 行为名称
 * @return The name.
 */
- (NSString *)name;
/**
 * Get all arguments in the action as a NSDictionary object.
 * 获取所有行为对象中的参数
 * @return NSDictionary of the arguments.
 */
- (NSDictionary *)arguments;
/**
 * Set a value of the specified argument from the action by the argument&#39;s name directly.
 * 通过name给指定action设置参数
 * @param value The value to set
 * @param name The name of the argument to look for
 * @return YES if successfull; otherwise NO
 */
- (BOOL)setArgumentValue:(NSString *)value forName:(NSString *)name;
/**
 * Get a value of the specified argument from the action by the argument&#39;s name directly.
 * 通过action参数名 获取action参数值
 * @param name The name of the argument to look for
 * @return The target value if successfull; otherwise NULL
 */
- (NSString *)argumentValueForName:(NSString *)name;
/**
 * Send action
 * 发送Action
 * @return YES if successfull; otherwise NO
 */
- (BOOL)post;
/**
 * Send action
 * 发送action 携带指定参数
 * @param arguments Arguments to set
 *
 * @return YES if successfull; otherwise NO
 */
- (BOOL)postWithArguments:(NSDictionary *)arguments;
/**
 * Get a states code of the last post. 
 * 获取最后POST的状态码
 * @return The status code
 */
- (NSInteger)statusCode;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DLNA DMS]]></title>
    <link href="http://blog.csdn.net/15173774932057.html"/>
    <updated>2018-01-31T13:44:53+08:00</updated>
    <id>http://blog.csdn.net/15173774932057.html</id>
    <content type="html"><![CDATA[
<p>上源码：</p>

<pre><code>#if defined(TARGET_OS_IPHONE)
#import &lt;UIKit/UIKit.h&gt;
#else
#import &lt;Foundation/NSArray.h&gt;
#import &lt;Foundation/NSString.h&gt;
#endif

#import &lt;CyberLink/UPnP.h&gt;

@class CGUpnpAvContentDirectory;
@class CGUpnpAvObject;
@class CGUpnpAvContainer;
@class CGUpnpAvServer;

#if !defined(_CG_CLINKCAV_SERVER_H_)
typedef void CgUpnpAvServer;
#endif

@protocol CGUpnpAvServerDelegate &lt;NSObject&gt;
@optional
- (void)upnpAvServer:(CGUpnpAvServer *)upnpAvServer browse:(CGUpnpAction *)browseAction avObject:(CGUpnpAvObject *)avObject;
- (void)upnpAvServer:(CGUpnpAvServer *)upnpAvServer search:(CGUpnpAction *)searchAction avObject:(CGUpnpAvObject *)avObject;
@end

/**
 * The CGUpnpAvServer class is a UPnP/AV media server class.
 * 这个 CGUpnpAvServer 类是UPnP/AV 谜题资源服务类
 */
@interface CGUpnpAvServer : CGUpnpDevice
{
}

@property(readonly) CGUpnpAvContentDirectory *contentDirectory;
// DMS 可以持有子服务作为属性
@property(readonly) CgUpnpAvServer *cAvObject;
// 设置代理
@property(assign) id&lt;CGUpnpAvServerDelegate&gt; delegate;

#if defined(TARGET_OS_IPHONE)
@property(retain) UIImage *thumbnailImage;
#endif

/*
 * Create a new UPnP/AV server.
 * 
 * @return New instance if successfull; otherwise nil.
 */
- (id)init;
/**
 * Create a new UPnP/AV server with the C instance.
 * 
 * @return New instance if successfull; otherwise nil.
 */
- (id)initWithCObject:(CgUpnpDevice *)cobj;
- (void)setUserObject:(id)aUserObj;
- (id)userObject;
// 浏览某一个CGUpnpAvObject 的ID 是否成功
- (BOOL)browse:(NSString *)aObjectId browseFlag:(NSString *)aBrowseFlag options:(NSDictionary *)options;
// 浏览二进制
- (CGUpnpAvObject *)browseMetadata:(NSString *)aObjectId;
// 所有子对象个数
- (NSArray *)browseDirectChildren:(NSString *)aObjectId;
// 获取指定个数的子对象
- (NSArray *)browseDirectChildren:(NSString *)aObjectId requestedCount:(NSUInteger) aRequestedCount;
// 获取指定个数的子对象
- (NSArray *)browseDirectChildren:(NSString *)aObjectId requestedCount:(NSUInteger)aRequestedCount startingIndex:(NSUInteger)aStartingIndex;
// 浏览行为
- (CGUpnpAction *)browseAction;
// 查找某个东西
- (NSArray *)search:(NSString *)aSearchCriteria;
// 同上
- (NSArray *)searchByBrowse:(NSString *)aSearchCriteria;
- (NSArray *)searchByBrowse:(NSString *)aSearchCriteria objectId:(NSString *)objectId;
// 查找UPnPAction
- (CGUpnpAction *)searchAction;
// 跟对象 （对象可以持有别的对象作为属性）
- (CGUpnpAvContainer *)rootObject;
// 通过ID获取AVObject
- (CGUpnpAvObject *)objectForId:(NSString *)aObjectId;
// 通过titlePath 获取AVObject对象
- (CGUpnpAvObject *)objectForTitlePath:(NSString *)aTitlePath;
// 开始
- (BOOL)start;
// 停止
- (BOOL)stop;
// 锁定
- (void)lock;
// 解锁
- (void)unlock;
@end
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DLNA DMC]]></title>
    <link href="http://blog.csdn.net/15173790393385.html"/>
    <updated>2018-01-31T14:10:39+08:00</updated>
    <id>http://blog.csdn.net/15173790393385.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">CGUpnpControlPoint</h2>

<pre><code>
#if !defined(_CG_UPNP_CCONTROLPOINT_H_)
typedef void CgUpnpControlPoint;
#endif

@class CGUpnpDevice;
@class CGUpnpControlPoint;

@protocol CGUpnpControlPointDelegate &lt;NSObject&gt;
@optional
// deviceUdn 设备的UDID 设备添加，更新，移除，失效的协议方法
- (void)controlPoint:(CGUpnpControlPoint *)controlPoint deviceAdded:(NSString *)deviceUdn;
- (void)controlPoint:(CGUpnpControlPoint *)controlPoint deviceUpdated:(NSString *)deviceUdn;
- (void)controlPoint:(CGUpnpControlPoint *)controlPoint deviceRemoved:(NSString *)deviceUdn;
- (void)controlPoint:(CGUpnpControlPoint *)controlPoint deviceInvalid:(NSString *)deviceUdn;
@end

/**
 * The CGUpnpControlPoint class is a wrapper class for CgUpnpControlPoint of CyberLink for C to 
 * program using only Objective-C directly on MacOSX.
 * Currently, the only basic methods are wrapped to control UPnP devices.
 */
@interface CGUpnpControlPoint : NSObject 
{
    CgUpnpControlPoint *cObject;
}
// 子控制点
@property(readonly) CgUpnpControlPoint *cObject;
// 代理对象
@property(assign) id&lt;CGUpnpControlPointDelegate&gt; delegate;

// get方法
- (CgUpnpControlPoint *)cObject;
/**
 * Activate some background threads of the control point such as SSDP and 
 * HTTP servers to listen messages and events of UPnP. You must call this 
 * method before you can actually use a control point.
 *
 * @return TRUE if successful; otherwise FALSE
 *
 */
 // 激活DMC的子线程 SSDP HTTP服务，去监听UPnP信息和时间
 // 使用控制点之前必须要激活
- (BOOL)start;
/**
 * Stop some background threads of the control point such as SSDP and 
 * HTTP servers to listen messages and events of UPnP. 
 *
 * @return TRUE if successful; otherwise FALSE
 *
 */
 // 停止后台线程 和 SSDP HTTP 服务
- (BOOL)stop;
/**
 * Check if the controll point is running.
 *
 * @return YES if the device is started normally, otherwise NO.
 */
 // 检测DMC是否正在运行
- (BOOL)isRunning;
/**
 * Send a M-SEARCH request to find for the all UPnP devices of UPnP in the network.
 * The method waits for the specified MX time. Use setSsdpSearchMX:(NSInteger)aMX to change the time.
 * The method is same as searchWithST() when the ST parameter is &quot;ssdp:all&quot;.
 */
 
 // 发送M-SEARCH 请求去发现局域网内所有的UPnP设备
- (void)search;
/**
 * Send a M-SEARCH request to find for the specified UPnP devices by a ST parameter in the network.
 * The method waits for the specified MX time. Use setSsdpSearchMX:(NSInteger)aMX to change the time.
 *
 * @param aST The Search Target parameter (ex. &quot;ssdp:all&quot;)
 */
- (void)searchWithST:(NSString *)aST;
/**
 * Set a MX parameter used for SSDP searches in seconds.
 * The parameter is used to wait for M-SEARCH responses in search() and searchWithST:(NSString *)aST.
 *
 * @param aMX Time to wait
 */
- (void)setSsdpSearchMX:(NSInteger)aMX;
/**
 * Get a MX parameter used for SSDP searches in seconds.
 * The parameter is used to wait for M-SEARCH responses in search() and searchWithST:(NSString *)aST.
 *
 * @return Time to wait
 */
// 等待时间
- (NSInteger)ssdpSearchMX;
/**
 * Get all UPnP devices which the control point found as a NSArray object. The array has the devices as instances of CGUpnpDevice.
 * @return NSArray of CGUpnpDevice.
 */
 // DMC发现的所有设备
- (NSArray *)devices;
/**
 * Get a specified UPnP devices by the UDN.
 * @return CGUpnpDevice when the specified device is found, otherwise nil.
 */
 // 通过UDN 获取指定的upnp设备
- (CGUpnpDevice *)deviceForUDN:(NSString *)udn;
</code></pre>

<h2 id="toc_1">CGUpnpAvContentDirectory</h2>

<pre><code>/**
 * The CGUpnpAvContentDirectory class has UPnP/AV objects of a media servers.
 *
 */
@interface CGUpnpAvContentDirectory : NSObject
{
    CGUpnpAvContentManager *contentMgr;
}
- (CGUpnpAvContainer *)rootObject;
- (CGUpnpAvObject *)objectForId:(NSString *)aObjectId;
- (CGUpnpAvObject *)objectForTitlePath:(NSString *)aTitlePath;
@end
</code></pre>

<h2 id="toc_2">CGUpnpAvContentManager</h2>

<pre><code>/**
 * The CGUpnpAvContentDirectory class has UPnP/AV objects of a media servers.
 *
 */
@interface CGUpnpAvContentManager : NSObject
{
    CGUpnpAvRoot *rootObj;
}
- (CGUpnpAvContainer *)rootObject;
- (CGUpnpAvObject *)objectForId:(NSString *)aObjectId;
- (CGUpnpAvObject *)objectForTitlePath:(NSString *)aTitlePath;
</code></pre>

<h2 id="toc_3">CGUpnpAvObject</h2>

<pre><code>
/**
 * The CGUpnpAvObject class is a wrapper class for CgUpnpAvObject of CyberLink for C.
 */

#define CGUPNPAV_OBJECT_MOVIE_FILEEXT @&quot;mov&quot;
#define CGUPNPAV_OBJECT_SOUND_FILEEXT @&quot;snd&quot;
#define CGUPNPAV_OBJECT_IMAGE_FILEEXT @&quot;img&quot;

@interface CGUpnpAvObject : CGXmlNode 
{
    // 父类对象
    CGUpnpAvObject *parent;
}
@property(retain) id userObject;
#if defined(TARGET_OS_IPHONE)
@property(retain) UIImage *thumbnailImage;
#endif

// xml字符串转成对象
+ (NSArray *)arrayWithXMLString:(NSString *)aXmlString;
// 初始化方法
- (id)init;
#if  !defined(TARGET_OS_IPHONE)
- (id)initWithXMLNode:(NSXMLElement *)aXmlNode;
#else
- (id)initWithXMLNode:(CgXmlNode *)aXmlNode;
- (id)initWithMediaContent:(CgUpnpAvContent *)aMediaContent;
#endif
// 判断方法
- (BOOL)isEqual:(id)anObject;
- (BOOL)isContainer;
- (BOOL)isItem;
// 设置、获取父亲类
- (void)setParent:(CGUpnpAvObject *)aParent;
- (CGUpnpAvObject *)parent;
// 祖先类对象
- (CGUpnpAvObject *)ancestor;
// 对象ID
- (NSString *)objectId;
// 子类对象个数
- (NSUInteger)childCount;
// 标题（文件名 不带后缀）
- (NSString *)title;
// upnp 类型
- (NSString *)upnpClass;
// 日期
- (NSString *)date;
// 相册URI
- (NSString *)albumArtURI;
// 设置对象ID、title等
- (void)setObjectId:(NSString *)aValue;
- (void)setTitle:(NSString *)aValue;
- (void)setUpnpClass:(NSString *)aValue;
// 是否包含某一资源对象
- (BOOL)isObjectId:(NSString *)aObjectId;
- (BOOL)isTitle:(NSString *)aTitle;
- (BOOL)isUpnpClass:(NSString *)aUpnpClass;
// 文件全名 （带后缀）
- (NSString *)toFileNameString;
// 艺术家 作者
- (NSString *)artist;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS设备上实现DLNA功能 Platinum 篇]]></title>
    <link href="http://blog.csdn.net/15172908985351.html"/>
    <updated>2018-01-30T13:41:38+08:00</updated>
    <id>http://blog.csdn.net/15172908985351.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">DLNA 相关</h2>

<ul>
<li>DLNA</li>
<li>Miracast</li>
<li>Airplay</li>
</ul>

<p>网络环境：同一个网关下，即同一个局域网的同一网段</p>

<h3 id="toc_1">基本名词解释</h3>

<ul>
<li>DLNA全称： DIGITAL LIVING NETWORK ALLIANCE(数字生活网络联盟)</li>
<li>宗旨： Enjoy your music, photos and videos, anywhere anytime</li>
<li>协议： DLNA包含若干协议和标准，最重要的也是我们最常用的就是UPnP技术</li>
<li>通用即插即用 (UPnP) 是一种用于 PC 机和智能设备（或仪器）的常见对等网络连接的体系结构，尤其是在家庭中。UPnP 以 Internet 标准和技术（例如 TCP/IP、HTTP 和 XML）为基础，使这样的设备彼此可自动连接和协同工作，从而使网络（尤其是家庭网络）对更多的人成为可能</li>
</ul>

<h3 id="toc_2">技术名词解释</h3>

<ul>
<li>DMC：控制点</li>
<li>DMS：资源服务器</li>
<li>DMR：渲染器</li>
</ul>

<h3 id="toc_3">发现设备</h3>

<p>智能终端设备加入组网，搜索其他设备的基本流程。当一个新的DMC加入局域网，为了获取当前网段里有哪些智能设备，需要遵循<code>SSDP</code>向默认的多播IP和端口发送获取信息的请求。对于<code>DMC</code> 可以使用DLNA定义的 <code>搜索响应方式</code> 来发现设备，这会用到HTTP的扩展协议<code>M-SEARCH</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react-native-splash-screen 给安卓项目添加启动图]]></title>
    <link href="http://blog.csdn.net/15151216159291.html"/>
    <updated>2018-01-05T11:06:55+08:00</updated>
    <id>http://blog.csdn.net/15151216159291.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">react-native-splash-screen 基本配置</h2>

<ul>
<li>安装插件：<code>npm install react-native-splash-screen --save</code></li>
<li>关联项目：<code>react-native link react-native-splash-screen</code> or <code>rnpm link react-native-splash-screen</code></li>
</ul>

<blockquote>
<p>link 之后，安卓项目中会自动添加头文件 以及部分代码，为保证项目顺利运行，还请确认下面代码是否已经完善。</p>
</blockquote>

<ul>
<li><p>确保 <code>android/settings.gradle</code>文件夹已经有下面代码</p>

<pre><code class="language-JavaScript">include &#39;:react-native-splash-screen&#39;   
project(&#39;:react-native-splash-screen&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-splash-screen/android&#39;)
</code></pre></li>
<li><p>android/app/build.gradle 文件中 添加依赖 <code>react-native-splash-screen</code></p>

<pre><code>...
dependencies {
...
compile project(&#39;:react-native-splash-screen&#39;)
}
</code></pre></li>
<li><p>更新 <code>MainApplication.java</code> 文件</p></li>
</ul>

<pre><code>// react-native-splash-screen &gt;= 0.3.1
import org.devio.rn.splashscreen.SplashScreenReactPackage;
// react-native-splash-screen &lt; 0.3.1
import com.cboy.rn.splashscreen.SplashScreenReactPackage;

public class MainApplication extends Application implements ReactApplication {

    private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {
        @Override
        protected boolean getUseDeveloperSupport() {
            return BuildConfig.DEBUG;
        }

        @Override
        protected List&lt;ReactPackage&gt; getPackages() {
            return Arrays.&lt;ReactPackage&gt;asList(
                    new MainReactPackage(),
            new SplashScreenReactPackage()  //here
            );
        }
    };

    @Override
    public ReactNativeHost getReactNativeHost() {
        return mReactNativeHost;
    }
}
</code></pre>

<h2 id="toc_1">准备添加代码和文件配置</h2>

<ul>
<li><code>app/src/main/res/layout</code> 文件夹下 添加 <code>launch_screen.xml</code> 并copy如下代码：</li>
</ul>

<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    android:background=&quot;@drawable/launch_screen&quot;&gt;
&lt;/LinearLayout&gt;
</code></pre>

<ul>
<li>创建文件夹 <code>drawable-xhdpi</code>、 <code>drawable-xxhdpi</code>（暂时先创建这两个就够了），将准备好的启动图 命名为 <code>launch_screen.png</code> 分别放入创建好的文件夹</li>
<li><p>白屏问题，设置透明背景：<code>android/app/src/main/res/values/styles.xml</code> 文件夹下 添加 <code>&lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;</code></p>

<pre><code>&lt;resources&gt;
&lt;!-- Base application theme. --&gt;
&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;
    &lt;!-- Customize your theme here. --&gt;
    &lt;!--设置透明背景--&gt;
    &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;
&lt;/style&gt;
&lt;/resources&gt;
</code></pre></li>
<li><p><code>android/app/src/main/res/values/colors.xml</code> 文件夹下，添加如下：</p>

<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;resources&gt; &lt;color name=&quot;primary_dark&quot;&gt;#660B0B0B&lt;/color&gt; &lt;/resources&gt;
</code></pre></li>
<li><p>适当的时刻 隐藏启动图  可以是在视图挂载完毕，可以是网络请求结束之后</p></li>
</ul>

<pre><code>import SplashScreen from &#39;react-native-splash-screen&#39;
componentDidMount() {
    SplashScreen.hide();
  }
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从零开始学习使用 vuex]]></title>
    <link href="http://blog.csdn.net/15168925544178.html"/>
    <updated>2018-01-25T23:02:34+08:00</updated>
    <id>http://blog.csdn.net/15168925544178.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>本文是建立在，对vuex理论有一定理解的基础上写的。<br/>
因为官方文档的写法是 针对 有一定的vue开发经验 和 JavaScript 有一定理解的开发者看的，对于小白级别的我来说，理解起来有一定困难。所以，唯一想我一向的小白想尽快上手vuex....</p>
</blockquote>

<p><a href="https://vuex.vuejs.org/zh-cn/installation.html">详情请参考vuex官方文档</a></p>

<h2 id="toc_0">安装</h2>

<h3 id="toc_1">直接下载 CDN 安装</h3>

<p>CDN 链接地址：<code>https://unpkg.com/vuex</code><br/>
指定到固定版本：<code>https://unpkg.com/vuex@2.0.0</code></p>

<pre><code>&lt;script src=&quot;/path/to/vue.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/path/to/vuex.js&quot;&gt;&lt;/script&gt;
</code></pre>

<h3 id="toc_2">npm 方式安装 （推荐！简单快捷，便于管理）</h3>

<p><code>npm install -save vuex</code></p>

<h3 id="toc_3">yar</h3>

<p><code>yarn add vuex</code></p>

<h3 id="toc_4">自己构建</h3>

<pre><code class="language-bash">git clone https://github.com/vuejs/vuex.git node_modules/vuex
cd node_modules/vuex
npm install
npm run build
</code></pre>

<h2 id="toc_5">导入vue工程中使用</h2>

<ul>
<li>main.js 入口文件</li>
</ul>

<blockquote>
<p>按照如下方式导入，工程就可以使用vuex的环境了</p>
</blockquote>

<pre><code class="language-JavaScript">// 导入vuex头文件
import Vuex from &#39;vuex&#39;
// 这里表示全局导入vuex
Vue.use(Vuex)
// 这里是我自定义的store文件 导出store对象
import store from &#39;@/study/vuexStudy/store/store.js&#39;
</code></pre>

<blockquote>
<p>入口组件<App/>中，绑定store</p>
</blockquote>

<pre><code>new Vue({
  el: &#39;#app&#39;,
  template: &#39;&lt;App/&gt;&#39;,
  components: { App },
  store
})
</code></pre>

<p>到这里 算是万里长征走了第一步。</p>

<h3 id="toc_6">创建Store对象</h3>

<h4 id="toc_7">store 的结构:</h4>

<pre><code class="language-JavaScript">export const store = new Vuex.Store({

  // ------state:状态值存储,这里可以存储n个状态的值
  state: {count: &#39;1&#39;},
  
  // ------getter:store中定义的getters可以认为是store的计算属性
  // getters接收state作为其第一个参数
  getters: {
    done (state) {
      return state.count + 5
    }
  },
  
  // ------mutations:状态值的改变，操作状态值
  // $store.commit(mutationsName, params)是更改状态值的唯一方法
  mutations: {
    increment (state) {
      // 变更状态
      state.count++
    }
  },

  // ------actions:可以认为是包装了mutations的function 需要用 dispatch(actionName) 的方式去派发
  actions: {
    add (context) {
      context.commit(&#39;increment&#39;)
    },
    addAsync (context) {
      // 延时1秒
      setTimeout(() =&gt; {
        context.commit(&#39;increment&#39;)
      }, 1000)
    }
  },
  // store可以合并几个子store，以此来进行项目的模块化
  modules: {
    a: moduleA,
    b: moduleB
  }
})
</code></pre>

<h4 id="toc_8">编辑定义store实体对象：</h4>

<ul>
<li>store.js文件中</li>
</ul>

<blockquote>
<p>这里为了便于抽离 我们外部声明城对象实体后嵌入绑定到store</p>
</blockquote>

<ol>
<li><p>创建一个store对象</p>

<pre><code class="language-JavaScript">export default const store = new Vuex.Store({
  state,//绑定之前创建的state对象到store中
  mutations,
  getters,
  actions,
  modules
})
</code></pre></li>
<li><p>定义一个状态对象 <code>state</code>（实体）</p>

<pre><code class="language-JavaScript">const state = {
  count: 0,
  state1: 1,
  state2: 2,
  state3: 3
}
</code></pre></li>
<li><p>定义getters对象</p>

<pre><code>const getters = {
  done (state) {
    return state.count + 5
  },
  getState1: function (state) {
    return state.state3
  },
  // ES6简写
  getState2: state =&gt;  state.state2
}
</code></pre></li>
<li><p>.vue 文件中直接获取state值</p>

<p>首先导入辅助函数：</p>

<pre><code>import { 
    mapState, 
    mapGetters, 
    mapMutations, 
    mapActions 
    } from &#39;vuex&#39;
</code></pre>

<ul>
<li>第一种方式：绑定到组件属性中，直接获取 （一般不用这个，绑定到computed中是最合适的）<code>$store.state.count</code>并使用</li>
</ul>

<pre><code class="language-JavaScript">export default {
    data() {
        return {
          testCount: this.$store.state.count
        }
    }
}
</code></pre>

<ul>
<li>第二种方式： 绑定到计算属性中（适合对store中的原始状态值进行一定处理的情况）</li>
</ul>

<pre><code class="language-JavaScript">export default {
    data() {
        return {
          testCount: this.$store.state.count
        }
    },
    computed:{
        testComputedCount1: function () {
            return this.$store.state.count + 22
        }
    }
}
</code></pre>

<ul>
<li>第三种方式：mapState辅助函数绑定状态state值到组件计算属性中</li>
</ul>

<pre><code class="language-JavaScript">export default {
    data() {
        return {
          testCount: this.$store.state.count
        }
    },
    computed:{
        testComputedCount1: function () {
            return this.$store.state.count + 22
        },
        ...mapState({
            count: state =&gt; state.count,
            mapState1: state =&gt; state.state1,
            mapState2: state =&gt; state.state2
        }),
    }
}
</code></pre>

<ul>
<li>第四种方式：使用store中绑定的getters进行获取</li>
</ul>

<pre><code class="language-JavaScript">export default {
    data() {
        return {
          testCount: this.$store.state.count
        }
    },
    computed:{
        testComputedCount1: function () {
            return this.$store.state.count + 22
        },
        ...mapState({
            count: state =&gt; state.count,
            mapState1: state =&gt; state.state1,
            mapState2: state =&gt; state.state2
        }),
        testComputedGettersCount2: funtion () {
            return this.$store.getters.done
        }
    }
}
</code></pre>

<ul>
<li>第五种方式： 借助mapGetters辅助函数绑定getters到vue的计算属性中</li>
</ul>

<pre><code class="language-JavaScript">export default {
    data() {
        return {
          testCount: this.$store.state.count
        }
    },
    computed:{
        testComputedCount1: function () {
            return this.$store.state.count + 22
        },
        ...mapState({
            count: state =&gt; state.count,
            mapState1: state =&gt; state.state1,
            mapState2: state =&gt; state.state2
        }),
        testComputedGettersCount2: funtion () {
            return this.$store.getters.done
        },

        //直接绑定方法数组的方式
        ...mapGetters([
            &#39;getState1&#39;,
            &#39;getState2&#39;,
            &#39;getState3&#39;
        ]),

        //重命名对象绑定方式
        ...mapGetters({
          mapGetterState1: &#39;getState1&#39;,
          mapGetterState3: &#39;getState3&#39;
        }),
    }
}
</code></pre></li>
<li><p>触发动作行为改变状态值</p>

<blockquote>
<p>方式一：$store.commit(&#39;mutationsName&#39;)</p>

<p>方式二：$store.dispatch(&#39;actionsName&#39;)    </p>
</blockquote>

<p>store.js文件中：</p>

<ul>
<li>初始化 mutations 和 actions (相当于是methods)</li>
</ul>

<pre><code>const mutations = {
    increment (state) {
        // 变更状态
        state.count = state.count * 5
    }
}
</code></pre>

<pre><code>import {action4} from &#39;@/path/actions.js&#39;
const actions = {
    // 同步方法
    add: function (context) {
        context.commit(&#39;increment&#39;)
    },
    // 延时操作 用于网络请求啊啥的
    addAsync (context) {
        // 延时1秒
        setTimeout(() =&gt; {
            context.commit(&#39;increment&#39;)
        }, 1000)
    },
    // 简写方式
    action2 (context) {
        context.commit(&#39;increment&#39;)
    },
    // 抽离到单独文件中，在导进封装好的变量来直接使用即可（导进来的目的是为了接收第一个参数：state），不绑定到store，需要手动传入store对象
    action4: action4,
}
</code></pre></li>
</ol>

<ul>
<li><p>绑定action 和 mutations 到 methods，然后 调用就行了</p>

<pre><code>export default {
    methods: {
        // 数组形式直接载入
        ...mapActions([
            &#39;add&#39;
        ]),
        // 重命名形式 
        ...mapActions({
            add: &#39;add&#39;,
            addAsync: &#39;addAsync&#39;,
            action4: &#39;action4&#39;
        }),
        // 同上
        ...mapMutations([
            &#39;increment&#39;
        ]),
        ...mapMutations({
            incrementMutation: &#39;increment&#39;
        })
    }
}
</code></pre></li>
</ul>

]]></content>
  </entry>
  
</feed>
