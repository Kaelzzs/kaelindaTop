<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kaelinda]]></title>
  <link href="http://kaelinda.top/atom.xml" rel="self"/>
  <link href="http://kaelinda.top/"/>
  <updated>2019-03-20T14:43:12+08:00</updated>
  <id>http://kaelinda.top/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[LeetCode【算法】宝石与石头]]></title>
    <link href="http://kaelinda.top/15524781153297.html"/>
    <updated>2019-03-13T19:55:15+08:00</updated>
    <id>http://kaelinda.top/15524781153297.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。</p>

<p>J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此&quot;a&quot;和&quot;A&quot;是不同类型的石头。</p>
</blockquote>

<p><strong>示例 1:</strong></p>

<blockquote>
<p>输入: J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;<br/>
输出: 3<br/>
示例 2:<br/>
输入: J = &quot;z&quot;, S = &quot;ZZ&quot;<br/>
输出: 0</p>
</blockquote>

<p><strong>注意:</strong></p>

<p><strong>S 和 J 最多含有50个字母。<br/>
 J 中的字符不重复。</strong></p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">常规操作</h2>

<pre><code class="language-text"> func numJewelsInStones(_ J: String, _ S: String) -&gt; Int {
    var gemNum:Int = 0

    for jew in J.characters {
        for stone in S.characters {
            if stone == jew {
                gemNum = gemNum + 1
            }
        }
    }
    return gemNum
}
</code></pre>

<table>
<thead>
<tr>
<th>执行时间</th>
<th>内存消耗</th>
</tr>
</thead>

<tbody>
<tr>
<td>28ms</td>
<td>19.1M</td>
</tr>
</tbody>
</table>

<h2 id="toc_1">优化后</h2>

<pre><code class="language-text"> func numJewelsInStones(_ J: String, _ S: String) -&gt; Int {
    var gemNum:Int = 0
    for jew in J {
        for stone in S {
            if stone == jew {
                gemNum = gemNum + 1
            }
        }
    }
    return gemNum

}
</code></pre>

<table>
<thead>
<tr>
<th>执行时间</th>
<th>内存消耗</th>
</tr>
</thead>

<tbody>
<tr>
<td>16ms</td>
<td>19.5MB</td>
</tr>
</tbody>
</table>

<h2 id="toc_2">考虑尽量减少中间变量</h2>

<pre><code class="language-text">func numJewelsInStones(_ J: String, _ S: String) -&gt; Int {

    var newS = S
    for jew in J.characters {
       newS = newS.replacingOccurrences(of: &quot;\(jew)&quot;, with: &quot;&quot;)
    }

    return S.count - newS.count
}
</code></pre>

<table>
<thead>
<tr>
<th>执行时间</th>
<th>内存消耗</th>
</tr>
</thead>

<tbody>
<tr>
<td>52ms</td>
<td>20.5M</td>
</tr>
</tbody>
</table>

<h2 id="toc_3">减少字符串操作</h2>

<pre><code class="language-text">func numJewelsInStones(_ J: String, _ S: String) -&gt; Int {
    var jewNum:Int = 0;
    for stone in S {
        if J.contains(stone) {
            jewNum = jewNum + 1;
        }
    }
    return jewNum;
}
</code></pre>

<table>
<thead>
<tr>
<th>执行时间</th>
<th>内存消耗</th>
</tr>
</thead>

<tbody>
<tr>
<td>40ms</td>
<td>18.9MB</td>
</tr>
</tbody>
</table>

<h2 id="toc_4">考虑少用字符串比较的Function</h2>

<pre><code class="language-text">func numJewelsInStones(_ J: String, _ S: String) -&gt; Int {
    var jewNum:Int = 0;
    var jSet = Set&lt;Character&gt;();
    for jew in J {
        jSet.insert(jew)
    }
    for stone in S {
        if jSet.contains(stone) {
            jewNum = jewNum + 1;
        }
    }
    return jewNum;
}
</code></pre>

<table>
<thead>
<tr>
<th>执行时间</th>
<th>内存消耗</th>
</tr>
</thead>

<tbody>
<tr>
<td>16ms</td>
<td>19.3M</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC中枚举写法  以及 字符串枚举探索]]></title>
    <link href="http://kaelinda.top/15523077857608.html"/>
    <updated>2019-03-11T20:36:25+08:00</updated>
    <id>http://kaelinda.top/15523077857608.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">常见枚举写法</h2>

<h3 id="toc_1">C语言模式的枚举写法：enum</h3>

<pre><code class="language-text">typedef enum{
    KLTypeRed = 1,
    KLTypeGreen = 2,
    KLTypeOrange = 3,
} KLType;
</code></pre>

<h3 id="toc_2">普通【整型】枚举写法 ：NS_ENUM</h3>

<pre><code class="language-text">typedef NS_ENUM(NSUInteger, KLType) {
    KLTypeRed = 1,
    KLTypeGreen = 2,
    KLTypeOrange = 3,
};
</code></pre>

<h3 id="toc_3">位移枚举 ：NS_OPTIONS</h3>

<pre><code class="language-text">typedef NS_OPTIONS(NSUInteger, KLType) {
    KLTypeRed = 1 &lt;&lt; 0,
    KLTypeGreen = 1 &lt;&lt; 1,
    KLTypeOrange = 1 &lt;&lt; 2,
};

</code></pre>

<span id="more"></span><!-- more -->

<h2 id="toc_4">字符串类型枚举实现方式探索</h2>

<h3 id="toc_5">基于普通枚举，定义C方法实现</h3>

<pre><code class="language-text">// 先定义一个常见的枚举
typedef NS_ENUM(NSUInteger, KLType) {
    KLTypeRed = 1,
    KLTypeGreen = 2,
    KLTypeOrange = 3,
};
// 定义一个C方法，C方法就是通过枚举值匹配字符串
NSString *KLTypeString(KLType status) {
    switch (status) {
        case KLTypeRed:
            return @&quot;红色&quot;;
        case KLTypeGreen:
            return @&quot;绿色&quot;;
        case KLTypeOrange:
            return @&quot;橘色&quot;;
        default:
            return @&quot;&quot;;
    }
}
</code></pre>

<h3 id="toc_6">基于普通枚举，定义C数组，设置 枚举值为 index</h3>

<pre><code class="language-text">// 先定义一个常见的枚举
typedef NS_ENUM(NSUInteger, KLType) {
    KLTypeRed = 1,
    KLTypeGreen = 2,
    KLTypeOrange = 3,
};
// 这个是 Map NSString * 类型的数组
NSString *KLTypeStringMap[] = {
    [KLTypeRed] = @&quot;红色&quot;,
    [KLTypeGreen] = @&quot;绿色&quot;,
    [KLTypeOrange] = @&quot;橘色&quot;
};


// 使用：
KLTypeStringMap[KLTypeRed];// 枚举值
</code></pre>

<h3 id="toc_7">日常做法 宏定义</h3>

<pre><code class="language-text">#define  KLTypeStringRed  @&quot;红色&quot;;
#define  KLTypeStringGreen  @&quot;绿色&quot;;
#define  KLTypeStringOrange  @&quot;橘色&quot;;
</code></pre>

<blockquote>
<p>上面几种方式都能实现  枚举值 到 字符串的转换，但是有一个缺点： <code>KLTypeStringMap</code> 和 <code>KLTypeString</code> 不能直接作为一个类型 规定 传参类型。</p>
</blockquote>

<hr/>

<h3 id="toc_8">定义一种新的数据类型</h3>

<pre><code class="language-text">// 定义一个新的类型 是 NSSting * 类型 类型名字叫 KLTypeStr
typedef NSString *KLTypeStr NS_STRING_ENUM;

static KLTypeStr const KLTypeStringRed = @&quot;红色&quot;;
static KLTypeStr const KLTypeStringGreen = @&quot;绿色&quot;;
static KLTypeStr const KLTypeStringOrange = @&quot;橘色&quot;;
</code></pre>

<h3 id="toc_9">Apple官方的做法</h3>

<pre><code class="language-text">.h 文件中 -------------
typedef NSString *KLTypeStr NS_STRING_ENUM;

FOUNDATION_EXPORT KLTypeStr const KLTypeStringRed;
FOUNDATION_EXPORT KLTypeStr const KLTypeStringGreen;
FOUNDATION_EXPORT KLTypeStr const KLTypeStringOrange;

.m 文件中 --------------
NSString * const KLTypeStringRed = @&quot;红色&quot;;
NSString * const KLTypeStringGreen = @&quot;绿色&quot;;
NSString * const KLTypeStringOrange = @&quot;橘色&quot;; 

</code></pre>

<blockquote>
<p>比较的时候 <code>StringEnum1 == StringEnum2</code> 直接比较的是内存地址，效率会更高。<br/>
相比会产生过多二进制文件的宏定义方式,假如宏定义比较多,建议用FOUNDATION_EXPORT。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 动画全解 (1)]]></title>
    <link href="http://kaelinda.top/15522686353535.html"/>
    <updated>2019-03-11T09:43:55+08:00</updated>
    <id>http://kaelinda.top/15522686353535.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">iOS动画&quot;概述&quot;（瞎说一通）</h2>

<p>Apple 为开发者提供的视图动画框架有如下几种：</p>

<ul>
<li><code>UIKit</code>：高级别框架,允许程序员创建视图,窗口,按钮,和其他 UI 相关的控件。它也将低层的 API 组合到一个 易于使用的高级别 API 中。</li>
<li><code>Quartz 2D</code>：运行内部的用于 iOS 画图的主引擎;UIKit 使用了 Quarz。 重点在画图。</li>
<li><p><code>Core Graphics</code>(核心图层)：加载图片，绘制图片等的框架重点在图形图片的渲染。</p></li>
<li><p><code>Core Animation</code>：iOS上的最基础的，应用最广泛的动画框架。（加载到CALayer上的动画）<br/>
<code>Core Animation</code> 其实是一个令人误解的命名。你可能认为它只是用来做动画的，但实际上它是从一个叫做<code>Layer Kit</code>这么一个不怎么和动画有关的名字演变而来，所以做动画这只是<code>Core Animation</code>特性的冰山一角。 <code>Core Animation</code>是一个复合引擎，它的职责就是尽可能快地组合屏幕上不同的可视内容，这个内容是被分解成独立的图层，存储在一个叫做图层树的体系之中。于是这个树形成了<code>UIKit</code>以及在iOS应用程序当中你所能在屏幕上 看见的一切的基础。</p></li>
</ul>

<span id="more"></span><!-- more -->

<h2 id="toc_1">CALayer 和 UIView</h2>

<h3 id="toc_2">CALayer</h3>

<p><code>CALayer</code> 类在概念上和 <code>UIView</code> 类似，同样也是一些被层级关系树管理的矩形块，同样也可以包含一些内 容(像图片，文本或者背景色)，管理子图层的位置。它们有一些方法和属性用来做动画和变换。和 最 大的不同是<code>CALayer</code>不处理用户的交互。</p>

<h3 id="toc_3">平行的层级关系</h3>

<p>每一个<code>UIView</code>都有一个<code>CALayer</code>实例的图层属性，也就是所谓的<code>backing layer</code>，视图的职责就是创建并管理这个图层，以确保当子视图在层级关系中添加或者被移除的时候，他们关联的图层也同样对应在层级关系树当中有相同的操作。(可以理解为 UIViewController  和 VC.view的关系，只不过VC是UIView的管理调度者,UIView 是 CALayer的管理调度者)</p>

<h3 id="toc_4">CALayer的能力</h3>

<ul>
<li>阴影，圆角，带颜色的边框 • 3D变换</li>
<li>非矩形范围</li>
<li>透明遮罩</li>
<li><p>多级非线性动画</p></li>
<li><p>contents属性</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView顶部空白的几种解决办法]]></title>
    <link href="http://kaelinda.top/15501356584731.html"/>
    <updated>2019-02-14T17:14:18+08:00</updated>
    <id>http://kaelinda.top/15501356584731.html</id>
    <content type="html"><![CDATA[
<ul>
<li>一、iOS7在Controller中增加了<code>automaticallyAdjustsScrollViewInsets</code>这个属性，当设置为YES时（默认YES），如果视图里面存在唯一一个UIScrollView或其子类View，那么它会自动设置相应的内边距，这样可以让scroll占据整个视图，又不会让导航栏遮盖。但是这个属性在iOS11之后被遗弃了，新增了一个<code>contentInsetAdjustmentBehavior</code>属性：
<code>
if (@available(iOS 11.0, *)) {        <br/>
    self.tableview.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;    <br/>
}else {<br/>
    self.automaticallyAdjustsScrollViewInsets = NO;<br/>
}
</code></li>
</ul>

<span id="more"></span><!-- more -->

<ul>
<li><p>二、UINavigationBar的透明度设置<code>self.navigationController.navigationBar.translucent = NO;</code><br/>
当这个属性设为NO时，tableview会在上方留出64.f的高度给navigationbar</p></li>
<li><p>三、tableView  </p>
<p>section的Header/Footer高度设置如果这个Header/Footer的height设置为0时，系统会认为你没有设置，从而给一个默认40的高度；若不需要显示这两个view，将他们的height设置一个无限小的数字即可，常用：CGFLOAT_MIN。</p>
<pre><code class="language-text">- (CGFloat)tableView:(UITableView*)tableView heightForHeaderInSection:(NSInteger)section{    
    return CGFLOAT_MIN;<br/>
}
</code></pre></li>
<li><p>四、tableHeaderView、tableFooterView高度设置以下操作会导致tableView顶部空白：</p>
<pre><code class="language-text">self.tableView.tableHeaderView = nil; 
self.tableView.tableHeaderView = [[UIView alloc] init]; <br/>
self.tableView.tableHeaderView = [[UIView alloc] initWithFrame:CGRectZero]; 
</code></pre>
<p>同理，tableFooterView也是如此。footer和header只要设置了任意一个都会使两个地方都出现空白。应这样设置：</p>
<pre><code class="language-text">self.tableView.tableHeaderView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, CGFLOAT_MIN)]; 
self.tableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, CGFLOAT_MIN)];
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 获取汉字【简体中文】笔画数]]></title>
    <link href="http://kaelinda.top/15477923365213.html"/>
    <updated>2019-01-18T14:18:56+08:00</updated>
    <id>http://kaelinda.top/15477923365213.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">思路</h2>

<ul>
<li><p>汉字字典库匹配笔画数</p>
<ul>
<li>优点： 实现逻辑简单，字典库好扩展</li>
<li>缺点： 内存消耗较大（不过也能承担）</li>
</ul>
<p><strong>思路：</strong> 这种实现思路是比较简单的，具体思路是将简体汉字所有字都穷举出来，然后分别匹配上指定的笔画数，当做一个大的数据库，每次都去查询一下。</p></li>
<li><p>汉字GBK编码匹配笔画数</p>
<ul>
<li>优点：相比字典库匹配，效率高，速度快</li>
<li>缺点：添加编码库不好添加，不好扩展</li>
</ul>
<p><strong>思路：</strong> 这种实现方案是需要获取GBK编码分别对应的笔画数，放到指定数组（数据库）中，每次通过输入的汉字 转码为二进制，通过二进制的值 匹配数据库中的笔画数。</p>
<p>-**************************<br/>
废话少说，盘它！<br/>
-**************************</p></li>
</ul>

<span id="more"></span><!-- more -->

<h2 id="toc_1">上代码，盘它！</h2>

<h3 id="toc_2">先来看下成果</h3>

<p>** 测试代码 **</p>

<pre><code class="language-text">dispatch_async(dispatch_get_global_queue(0, 0), ^{
        // 处理耗时操作的代码块...
        NSString *testString = @&quot;浓睡不消残酒&quot;;
        // 字典查询匹配
        [self testStrokeCount:testString];
        // 编码查询匹配
        [self chineseCharactersCount:testString];
    });
</code></pre>

<p>** 测试结果 **</p>

<pre><code class="language-text">------- 字典查询匹配

TemplateApp[78833:3000133] 汉字：浓 ------ 笔画数：9
TemplateApp[78833:3000133] 汉字：睡 ------ 笔画数：13
TemplateApp[78833:3000133] 汉字：不 ------ 笔画数：4
TemplateApp[78833:3000133] 汉字：消 ------ 笔画数：10
TemplateApp[78833:3000133] 汉字：残 ------ 笔画数：9
TemplateApp[78833:3000133] 汉字：酒 ------ 笔画数：10

------  编码查询匹配
TemplateApp[78833:3000133] 汉字：浓  ------ 笔画数：9
TemplateApp[78833:3000133] 汉字：睡  ------ 笔画数：13
TemplateApp[78833:3000133] 汉字：不  ------ 笔画数：4
TemplateApp[78833:3000133] 汉字：消  ------ 笔画数：10
TemplateApp[78833:3000133] 汉字：残  ------ 笔画数：9
TemplateApp[78833:3000133] 汉字：酒  ------ 笔画数：10
</code></pre>

<h3 id="toc_3">汉字字典库匹配笔画数 核心代码</h3>

<pre><code class="language-text">-(NSDictionary *)chineseCharacters{
    if (!_chineseCharacters) {
        _chineseCharacters = [[NSDictionary alloc] init];
        _chineseCharacters = [self readLocalJsonFileWithName:@&quot;Chinese&quot; type:@&quot;json&quot;];
    }
    return _chineseCharacters;
}
- (NSArray *)bytesArray{
    if (!_bytesArray) {
        _bytesArray = [[NSArray alloc] init];
        _bytesArray = [self readLocalJsonFileWithName:@&quot;byteNum&quot; type:@&quot;json&quot;];
    }
    return _bytesArray;
}


#pragma mark - **************** Tool function
/** 读取本地文件 */
-(nullable id)readLocalJsonFileWithName:(NSString *)fileName type:(NSString *)type{
    // 获取文件路径
    NSString *path = [[NSBundle mainBundle] pathForResource:fileName ofType:type];
    // 将文件数据化
    NSData *data = [[NSData alloc] initWithContentsOfFile:path];
    // 对数据进行JSON格式化并返回字典形式
    return [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:nil];
}

+(BOOL)isAllCCString:(NSString *)tempStr{
    for (int i=0; i&lt;tempStr.length; i++) {
        NSString *indexstr = [tempStr substringWithRange:NSMakeRange(i, 1)];
        NSInteger strlength = [KLChineseCharactersTool getCharactCountOfString:indexstr];
        if (strlength != 2) {
            return NO;
        }
        
    }
    return YES;
}

-(BOOL)isBlankString:(NSString *)string{
    
    if (string ==nil || string ==NULL) {
        return YES;
    }
    if ([string isKindOfClass:[NSNull class]]) {
        return YES;
    }
    if ([[string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]]length]==0) {//特殊字符判断
        return YES;
    }
    return NO;
}

-(NSInteger)getSigleChineseStrokeCountWith:(NSString *)str{
    NSInteger count = 0;
    
    BOOL isALLCC = [[self class] isAllCCString:str];
    if (!isALLCC) {
        // 如果不是纯汉字返回笔画数为0
        return 0;
    }
    
    // 单字符判断
    if (str.length&lt;=0) {
        NSLog(@&quot;字符串不合法&quot;);
        return 0;
    }
    
    // 多字符 取第一个字符判断
    NSString *sigleStr = @&quot;&quot;;
    if (str.length &gt; 1) {
        NSLog(@&quot;并非单个字符&quot;);
        sigleStr = [str substringWithRange:NSMakeRange(0, 1)];
    }
    
    if (str.length == 1) {
        sigleStr = str;
    }
    
    
    // 获取笔划列表
    NSDictionary *chineseDic = self.chineseCharacters;
    
    // 查询
    for (int i=0; i&lt;25; i++) {
        // 按次序获取某个笔划数的所有汉字组成的字符
        NSString *itemString = [chineseDic objectForKey:[NSString stringWithFormat:@&quot;%d&quot;,(i+1)]];
        //如果 传入汉字不为空 异常判断
        if (![self isBlankString:itemString] &amp;&amp; itemString.length &gt; 0 ) {
            // 包含这个汉字 将笔画数 i+1 返回
            if ([itemString rangeOfString:sigleStr].location != NSNotFound) {
                NSLog(@&quot;汉字：%@  ------ 笔画数：%d&quot;,sigleStr,i+1);
                count = count + (i+1);
                break;
            }
        }
        
    }
    
    if (count == 0) {
        NSLog(@&quot;字库中暂时没有该汉字&quot;);
    }
    
    return count;
}

-(NSInteger)getChineseStrokeCountWith:(NSString *)chineseString{
    NSInteger count = 0;
    
    // 单个汉字？
    if (chineseString.length == 1 ) {
        return [self getSigleChineseStrokeCountWith:chineseString];
    }
    
    // 多汉字
    // 获取笔划列表
    
    for (int i=0; i&lt;chineseString.length; i++) {
        // 将传入字符分割成单个字
        NSString *indexStr = [chineseString substringWithRange:NSMakeRange(i, 1)];
        NSInteger sigleCount = [self getSigleChineseStrokeCountWith:indexStr];
        count = count + sigleCount;
    }
    
    NSLog(@&quot;%@  --- 共计：%ld划&quot;,chineseString ,(long)count);
    
    return count;
}
</code></pre>

<h3 id="toc_4">GBK编码查询法 核心代码</h3>

<pre><code class="language-text">#pragma mark - **************** BGBK汉字编码 匹配
+(int)getCharactCountOfString:(NSString *)strtemp{
    
    int strlength = 0;
    char* p = (char*)[strtemp cStringUsingEncoding:NSUnicodeStringEncoding];
    for (int i=0 ; i&lt;[strtemp lengthOfBytesUsingEncoding:NSUnicodeStringEncoding] ;i++) {
        if (*p) {
            p++;
            strlength++;
        }
        else {
            p++;
        }
        
    }
    return strlength;
}



-(NSInteger)getStrokeCountWithHighByte:(int)highByte lowByte:(int)lowByte{
    NSInteger strokeCount = 0;
    //high: 176 - 247       low: 161 - 154  该范围才是汉子区域
    if (highByte &lt; 0xB0 || highByte &gt; 0xF7 || lowByte &lt; 0xA1 || lowByte &gt; 0xFE) {
        // 非GB2312合法字符
        return 0;
    }else{
        int offset = (highByte - 0xB0) * (0xFE - 0xA0) + (lowByte - 0xA1);
        NSArray *byteArr = self.bytesArray;
        strokeCount = ((NSNumber *)[byteArr objectAtIndex:offset]).intValue;
        return strokeCount;
    }
    return strokeCount;
}


-(NSInteger)getBytesChineseStrokeCountWith:(NSString *)ccString{
    NSInteger count = 0;
    
    // 单个汉字？
    if (ccString.length == 1 ) {
        return [self getBytesSigleChineseStrokeCountWith:ccString];
    }
    
    for (int i=0; i&lt;ccString.length; i++) {
        
        NSString *indexstr = [ccString substringWithRange:NSMakeRange(i, 1)];
        
        NSInteger strlength = [KLChineseCharactersTool getCharactCountOfString:indexstr];
        
        if (strlength!=2) {
            NSLog(@&quot;kael --  字符 不合法 %@&quot;,indexstr);
            break;
        }
        
        if (strlength == 2) {
            count = count + [self getBytesSigleChineseStrokeCountWith:indexstr];
        }
        
        
    }
    
    return count;
}

-(NSInteger)getBytesSigleChineseStrokeCountWith:(NSString *)ccString{
    NSInteger count = 0;
    // 1、先判断是否是汉字
    BOOL isALLCC = [[self class] isAllCCString:ccString];
    if (!isALLCC) {
        // 如果不是纯汉字返回笔画数为0
        return 0;
    }
    
    // 2、判断字符个数
    // 不合法
    if (ccString.length&lt;=0) {
        NSLog(@&quot;字符串不合法&quot;);
        return 0;
    }
    
    // 多字符 取第一个字符判断
    NSString *sigleStr = @&quot;&quot;;
    if (ccString.length &gt; 1) {
        NSLog(@&quot;并非单个字符&quot;);
        sigleStr = [ccString substringWithRange:NSMakeRange(0, 1)];
    }
    
    // 单字符判断
    if (ccString.length == 1) {
        sigleStr = ccString;
    }
    
    
    NSInteger strlength = [KLChineseCharactersTool getCharactCountOfString:sigleStr];
    
    if (strlength!=2) {
        NSLog(@&quot;kael --  字符 不合法 %@&quot;,ccString);
        return 0;
    }else{
        // BGK 编码 --&gt; 转为 NSData
        NSStringEncoding enc =CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);
        NSData *indexData = [ccString dataUsingEncoding:enc];
        // NSData --&gt; Bytes
        Byte *indexByte = (Byte *)[indexData bytes];
        // 取高8位 低8位
        int highByte = indexByte[0];
        int lowByte = indexByte[1];
        
        count = [self getStrokeCountWithHighByte:highByte lowByte:lowByte];
        NSLog(@&quot;汉字：%@ ------ 笔画数：%ld&quot;,sigleStr,count);
        
    }
    
    return count;
}
</code></pre>

<h3 id="toc_5">核心数据 及 【文件】</h3>

<ul>
<li>汉字字典库匹配字典</li>
</ul>

<pre><code class="language-text">{&quot;1&quot;:&quot;一乙&quot;,
 &quot;2&quot;:&quot;丁七乃乜九了二人亻儿入八冂几凵刀刁力勹匕十厂厶又&quot;,
 &quot;3&quot;:&quot;万丈三上下丌个丫丸久乇么义乞也习乡亍于亏亡亿兀凡刃勺千卫叉口囗土士夕大女子孑孓寸小尢尸山巛川工己已巳巾干幺广廾弋弓才门飞马&quot;,
 &quot;4&quot;:&quot;不与丐丑专中丰丹为之乌书予云互亓五井亢什仁仂仃仄仅仆仇仉今介仍从仑仓允元公六兮内冈冗凤凶分切刈劝办勾勿匀化匹区卅升午卞厄厅历及友双反壬天太夫夭孔少尤尹尺屯巴币幻廿开引心忆戈户手扎支攴攵文斗斤方无日曰月木欠止歹殳毋比毛氏气水火爪父爻爿片牙牛犬王瓦肀艺见计订讣认讥贝车邓长闩队韦风且丕世丘丙业丛东丝主乍乎乏&quot;,
 &quot;5&quot;:&quot;乐仔仕他仗付仙仝仞仟仡代令以仨仪仫们兄兰冉册写冬冯凸凹出击刊刍功加务劢包匆北匝卉半卟占卡卢卮卯厉去发古句另叨叩只叫召叭叮可台叱史右叵叶号司叹叻叼叽囚四圣处外央夯失头奴奶孕宁它宄对尔尕尻尼左巧巨市布帅平幼庀弁弗弘归必忉戊戋扑扒打扔斥旦旧未末本札术正母氐民氕永汀汁汇汉灭犯犰玄玉瓜甘生用甩田由甲申电疋白皮皿目矛矢石示礼禾穴立纠艽艾艿节讦讧讨让讪讫训议讯记轧边辽邗邙邛邝钅闪阡阢饥驭鸟龙&quot;,
 &quot;6&quot;:&quot;丞丢乒乓乔乩买争亘亚交亥亦产仰仲仳仵件价任份仿企伉伊伍伎伏伐休众优伙会伛伞伟传伢伤伥伦伧伪伫佤充兆先光全共关兴再军农冰冱冲决凫凼刎刑划刖列刘则刚创劣动匈匠匡华协印危压厌厍吁吃各吆合吉吊同名后吏吐向吒吓吕吖吗囝回囟因囡团在圩圪圬圭圮圯地圳圹场圾壮夙多夷夸夹夺夼奸她好妁如妃妄妆妇妈字存孙宅宇守安寺寻导尖尘尥尧尽屹屺屿岁岂岌州巡巩帆师年并庄庆延廷异式弛当忏忖忙戌戍戎戏成托扛扣扦执扩扪扫扬收旨早旬旭旮旯曲曳有朱朴朵机朽杀杂权次欢此死毕氖氘氽汆汊汐汔汕汗汛汜汝江池污汤汲灯灰爷牝牟犴犷犸玎玑百祁竹米糸纡红纣纤纥约级纨纩纪纫缶网羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色芄芊芋芍芎芏芑芒芗芝芨虍虫血行衣西观讲讳讴讵讶讷许讹论讼讽设访诀贞负轨达迁迂迄迅过迈邡邢那邦邪邬钆钇闫闭问闯阪阮阱防阳阴阵阶页饧驮驯驰齐&quot;,
 &quot;7&quot;:&quot;两严串丽乱亨亩伯估伲伴伶伸伺似伽佃但位低住佐佑体何佗佘余佚佛作佝佞佟你佣佥佧克免兑兕兵况冶冷冻初删判刨利别刭助努劫劬劭励劲劳匣医卣卤即却卵县君吝吞吟吠吡吣否吧吨吩含听吭吮启吱吲吴吵吸吹吻吼吾呀呃呆呈告呋呐呒呓呔呕呖呗员呙呛呜囤囫园困囱围囵圻址坂均坊坌坍坎坏坐坑块坚坛坜坝坞坟坠声壳奁奂妊妍妒妓妖妗妙妞妣妤妥妨妩妪妫姊姒孚孛孜孝宋完宏寿尬尾尿局屁层岈岍岐岑岔岖岗岘岙岚岛岜希帏帐庇床庋序庐庑库应弃弄弟张形彤彷役彻忌忍忐忑忒志忘忡忤忧忪快忭忮忱忸忻忾怀怃怄怅怆我戒扭扮扯扰扳扶批扼找技抄抉把抑抒抓投抖抗折抚抛抟抠抡抢护报拒拟攸改攻旰旱时旷更杆杈杉杌李杏材村杓杖杜杞束杠条来杨杩极欤步歼每氙氚求汞汨汩汪汰汴汶汹汽汾沁沂沃沅沆沈沉沌沏沐沔沙沛沟没沣沤沥沦沧沩沪泐泛灵灶灸灼灾灿炀牡牢状犹狁狂狃狄狈玖玛甫甬男甸町疔疖疗皂盯矣矶社祀秀私秃究穷系纬纭纯纰纱纲纳纵纶纷纸纹纺纽纾罕羌肓肖肘肚肛肜肝肟肠良芈芘芙芜芟芡芤芥芦芩芪芫芬芭芮芯芰花芳芴芷芸芹芽芾苁苄苇苈苊苋苌苍苎苏苡苣虬补角言证诂诃评诅识诈诉诊诋诌词诎诏译诒谷豆豕豸贡财赤走足身轩轫辛辰迎运近迓返迕还这进远违连迟邑邮邯邰邱邳邴邵邶邸邹邺邻酉里针钉钊钋钌闰闱闲闳间闵闶闷阻阼阽阿陀陂附际陆陇陈陉韧饨饩饪饫饬饭饮驱驳驴鸠鸡麦龟&quot;,
 &quot;8&quot;:&quot;丧乖乳事些亟享京佩佬佯佰佳佴佶佻佼佾使侃侄侈侉例侍侏侑侔侗供依侠侣侥侦侧侨侩侪侬兔兖其具典冼冽净凭凯函刮到刳制刷券刹刺刻刽刿剀剁剂劾势匦卑卒卓单卖卦卧卷卺厕叁参叔取呢呤呦周呱味呵呶呷呸呻呼命咀咂咄咆咋和咎咏咐咒咔咕咖咙咚咛咝哎囹固国图坡坤坦坨坩坪坫坭坯坳坶坷坻坼垂垃垄垅垆备夜奄奇奈奉奋奔妮妯妲妹妻妾姆始姐姑姓委姗孟孢季孤孥学宓宕宗官宙定宛宜宝实宠审尚居屈屉届岢岣岩岫岬岭岱岳岵岷岸岽岿峁峄巫帑帔帕帖帘帙帚帛帜幸底庖店庙庚府庞废建弥弦弧弩弪录彼往征徂径忝忠念忽忿态怂怊怍怏怔怕怖怙怛怜怡怦性怩怪怫怯怵怿戕或戗戽戾房所承抨披抬抱抵抹抻押抽抿拂拄担拆拇拈拉拊拌拍拎拐拓拔拖拗拘拙拚招拢拣拥拦拧拨择放斧斩於旺昀昂昃昆昊昌明昏易昔昕昙朊朋服杪杭杯杰杲杳杵杷杼松板构枇枉枋析枕林枘枚果枝枞枢枣枥枧枨枪枫枭柜欣欧武歧殁殴氓氛沓沫沭沮沱沲河沸油治沼沽沾沿泄泅泊泌泓泔法泖泗泞泠泡波泣泥注泪泫泮泯泱泳泷泸泺泻泼泽泾浅炅炉炊炎炒炔炕炖炙炜炝炬爬爸版牦牧物狍狎狐狒狗狙狞玟玢玩玫玮环现瓮瓯甙画甾畀畅疙疚疝疟疠疡的盂盱盲直知矸矽矾矿砀码祆祈祉秆秉穸穹空竺籴线绀绁绂练组绅细织终绉绊绋绌绍绎经绐罔罗者耵耶肃股肢肤肥肩肪肫肭肮肯肱育肴肷肺肼肽肾肿胀胁臾舍艰苑苒苓苔苕苗苘苛苜苞苟苠苤若苦苫苯英苴苷苹苻茁茂范茄茅茆茇茉茌茎茏茑茔茕茚虎虏虮虱表衩衫衬规觅视诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩责贤败账货质贩贪贫贬购贮贯转轭轮软轰迢迤迥迦迨迩迪迫迭迮述迳邾郁郄郅郇郊郎郏郐郑郓采金钍钎钏钐钒钓钔钕钗闸闹阜陋陌降限陔陕隶隹雨青非顶顷饯饰饱饲饴驵驶驷驸驹驺驻驼驽驾驿骀鱼鸢鸣黾齿&quot;,
 &quot;9&quot;:&quot;临举亭亮亲侮侯侵便促俄俅俊俎俏俐俑俗俘俚俜保俞俟信俣俦俨俩俪俭修兹养冒冠剃削剌前剐剑勃勇勉勋匍南卸厘厚受变叙叛呲咣咤咦咧咨咩咪咫咬咭咯咱咳咴咸咻咽咿哀品哂哄哆哇哈哉哌响哏哐哑哒哓哔哕哗哙哚哜哝哞哟哪囿型垌垒垓垛垠垡垢垣垤垦垧垩垫垭垮垲垴城埏复奎奏契奕奖姘姚姜姝姣姥姨姹姻姿威娃娄娅娆娇娈娜孩孪客宣室宥宦宪宫封将尜尝屋屎屏峋峒峙峡峤峥峦差巷帝带帧帮幽庠庥度庭弈弭弯彖彦彪待徇很徉徊律後怎怒思怠急怨总怼恂恃恍恒恢恤恨恪恫恬恸恹恺恻恼恽战扁扃拜括拭拮拯拱拴拶拷拼拽拾持挂指按挎挑挖挝挞挟挠挡挢挣挤挥挪挺政故斫施既昝星映春昧昨昭是昱昴昵昶昼显曷朐枯枰枳枵架枷枸柁柃柄柏某柑柒染柔柘柙柚柝柞柠柢查柩柬柯柰柱柳柽柿栀栅标栈栉栊栋栌栎栏树歪殂殃殄殆殇残段毒毖毗毡氟氡氢泉泵泶洁洄洇洋洌洎洒洗洙洚洛洞津洧洪洫洮洱洲洳洵洹活洼洽派浃浇浈浊测浍济浏浑浒浓浔涎炫炭炮炯炱炳炷炸点炻炼炽烀烁烂烃爰牮牯牲牵狠狡狨狩独狭狮狯狰狱狲玲玳玷玻珀珂珈珉珊珍珏珐珑瓴甚甭畈畋界畎畏疣疤疥疫疬疮疯癸皆皇皈盅盆盈相盹盼盾省眄眇眈眉看眍眨矜矧矩砂砉砌砍砑砒研砖砗砘砚砜砭祓祖祗祚祛祜祝神祠祢禹禺秋种科秒秕秭穿窀突窃窆竖竽竿笃笈类籼籽绑绒结绔绕绗绘给绚绛络绝绞统缸罘罚美羿耍耐耔耷胂胃胄胆背胍胎胖胗胙胚胛胜胝胞胡胤胥胧胨胩胪胫脉舁舡舢舣茈茗茛茜茧茨茫茬茭茯茱茳茴茵茶茸茹茺茼荀荃荆荇草荏荐荑荒荔荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莒莛虐虹虺虻虼虽虾虿蚀蚁蚂蚤衍衲衽衿袂袄袅要觇览觉訇诫诬语诮误诰诱诲诳说诵诶贰贱贲贳贴贵贶贷贸费贺贻赳赴赵趴轱轲轳轴轵轶轷轸轹轺轻迷迸迹追退送适逃逄逅逆选逊郗郛郜郝郡郢郦郧酊酋重钙钚钛钜钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯闺闻闼闽闾阀阁阂陛陟陡院除陧陨险面革韭音顸项顺须飑飒食饵饶饷饺饼首香骁骂骄骅骆骇骈骨鬼鸥鸦鸨鸩&quot;,
 &quot;10&quot;:&quot;乘亳俯俱俳俸俺俾倌倍倏倒倔倘候倚倜借倡倥倦倨倩倪倬倭倮债值倾偌健党兼冢冤冥凄准凇凉凋凌剔剖剜剞剡剥剧勐匪匿卿厝原叟哥哦哧哨哩哭哮哲哳哺哼哽哿唁唆唇唉唏唐唑唔唛唠唢唣唤唧啊圃圄圆垸埂埃埋埒埔埕埘埙埚壶夏套奘奚姬娉娌娑娓娘娟娠娣娥娩娱娲娴婀孬宰害宴宵家宸容宽宾射屐屑展屙峨峪峭峰峻崂崃席帱座弱徐徒徕恁恋恐恕恙恚恝恣恧恩恭息恳恶悃悄悌悍悒悔悖悚悛悝悟悦悭悯扇拳拿挈挚挛挨挫振挹挽捂捃捅捆捉捋捌捍捎捏捐捕捞损捡换捣效敉敌敖斋料旁旃旄旅旆晁晃晋晌晏晒晓晔晕晖晚晟朔朕朗柴栓栖栗栝校栩株栲栳样核根格栽栾桀桁桂桃桄桅框案桉桊桌桎桐桑桓桔桕桠桡桢档桤桥桦桧桨桩梃梆梢梧梨殉殊殷毙毪氤氦氧氨氩泰流浆浙浚浜浞浠浣浦浩浪浮浯浴海浸浼涂涅消涉涌涑涓涔涕涛涝涞涟涠涡涣涤润涧涨涩烈烊烘烙烛烟烤烦烧烨烩烫烬热爱爹特牺狳狴狷狸狺狻狼猁猃玺珙珞珠珥珧珩班珲琊瓞瓶瓷畔留畚畛畜疰疱疲疳疴疸疹疼疽疾痂痃痄病症痈痉皋皱益盍盎盏盐监眙眚真眠眢眩砝弢砟砣砥砧砩砬砰破砷砸砹砺砻砼砾础祟祥祧祯离秘租秣秤秦秧秩秫积称窄窈窍站竞笄笆笊笋笏笑笔笕笫粉粑紊素索紧绠绡绢绣绥绦继绨缺罟罡罢羔羞翁翅耄耆耕耖耗耘耙耸耻耽耿聂胭胯胰胱胲胳胴胶胸胺胼能脂脆脊脍脎脏脐脑脒脓臬臭致舀舐舨航舫般舭舯舰舱艳荷荸荻荼荽莅莆莉莎莓莘莜莞莠莨莩莪莫莰莱莲莳莴莶获莸莹莺莼莽虑虔蚊蚋蚌蚍蚓蚕蚜蚝蚣蚧蚨蚩蚪蚬衄衮衰衷衾袁袍袒袖袜袢被觊请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊豇豹豺贼贽贾贿赀赁赂赃资赅赆赶起趵趸趿躬軎轼载轾轿辁辂较辱逋逍透逐逑递途逖逗通逛逝逞速造逡逢逦邕部郫郭郯郴郸都酌配酎酏酐酒釜钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铌铍铎阃阄阅阆陪陬陲陴陵陶陷隼隽难顼顽顾顿颀颁颂颃预饽饿馀馁骊骋验骏高髟鬯鬲鸪鸫鸬鸭鸯鸱鸲鸳鸵&quot;,
 &quot;11&quot;:&quot;龛鸶龀乾偃假偈偎偏偕做停偬偶偷偻偾偿傀兜兽冕减凑凰剪副勒勖勘匏匐匙匮匾厢厣厩唪唬售唯唰唱唳唷唼唾唿啁啃啄商啉啐啕啖啜啡啤啥啦啧啪啬啭啮啵啶啷啸喏喵圈圉圊埝域埠埤埭埯埴埸培基埽堀堂堆堇堋堍堑堕堵够奢娶娼婆婉婊婕婚婢婧婪婴婵婶孰宿寂寄寅密寇尉屠崆崇崎崔崖崛崞崤崦崧崩崭崮巢帷常帻帼庳庵庶康庸庹庾廊弹彗彩彬得徘徙徜恿悉悠患您悫悬悱悴悸悻悼情惆惊惋惕惘惚惜惝惟惦惧惨惬惭惮惯戚戛扈挲捧捩捭据捱捶捷捺捻掀掂掇授掉掊掎掏掐排掖掘掠探接控推掩措掬掭掮掳掴掷掸掺掼揶敏救敕教敛敝敢斛斜断旋旌旎族晗晡晤晦晨曹曼望桫桴桶桷梁梅梏梓梗梦梭梯械梳梵检棂欲欷殍殒殓毫氪涪涫涮涯液涵涸涿淀淄淅淆淇淋淌淑淖淘淙淝淞淠淡淤淦淫淬淮深淳混淹添清渊渌渍渎渐渑渔渖渗渚渠烯烷烹烽焉焊焐焓焕焖焘爽牾牿犁猊猎猓猕猖猗猛猜猝猞猡猪猫率球琅理琉琏琐瓠甜略畦疵痊痍痒痔痕痖皎皑皲盒盔盖盗盘盛眦眭眯眵眶眷眸眺眼着睁矫砦硅硇硌硎硐硒硕硖硗硭票祭祷祸秸移秽稆窑窒窕竟章笙笛笞笠笤笥符笨笪第笮笱笳笸笺笼笾筇粒粕粗粘粜粝累绩绪绫续绮绯绰绱绲绳维绵绶绷绸绺绻综绽绾绿缀缁缍羚羝羟翊翌翎耜聃聆聊聋职聍胬脖脘脚脞脬脯脱脲脶脸舂舳舴舵舶舷舸船舻艴菀菁菅菇菊菌菏菔菖菘菜菝菟菠菡菥菩菪菰菱菲菸菹菽萁萃萄萆萋萌萍萎萏萑萘萜萝萤营萦萧萨萸著虚蚯蚰蚱蚴蚵蚶蚺蛀蛄蛆蛇蛉蛊蛋蛎蛏衅衔袈袋袤袭袱袷袼裆裉觋觖谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝豉豚象赇赈赉赊赦赧趺趼趾跃跄距躯辄辅辆逭逮逯逵逶逸逻郾鄂鄄酗酚酝酞野铐铑铒铕铖铗铘铙铛铜铝铞铟铠铡铢铣铤铥铧铨铩铪铫铬铭铮铯铰铱铲铳铴铵银铷阈阉阊阋阌阍阎阏阐隅隆隈隋隍随隐隗雀雩雪颅领颇颈馄馅馆馗骐骑骒骓骖鸷鸸鸹鸺鸽鸾鸿鹿麸麻黄龚&quot;,
 &quot;12&quot;:&quot;亵傅傈傍傣傥傧储傩傲凿剩割募博厥厦厨啻啼啾喀喁喂喃善喇喈喉喊喋喑喔喘喙喜喝喟喧喱喳喷喹喻喽喾嗖嗟堙堞堠堡堤堪堰塄塔壹奠奥婷婺婿媒媚媛媪嫂孱孳富寐寒寓尊就属屡崴崽崾嵇嵋嵌嵘嵛嵝嵫嵬嵯巯巽帽幂幄幅弑强弼彘彭御徨循悲惑惠惩惫惰惴惶惹惺愀愉愎愕愠愣愤愦愧慌慨戟戡戢扉掌掣掰掾揄揆揉揍揎描提插揖揞揠握揣揩揪揭揲援揸揽揿搀搁搂搅搓搔搜搭搽摒敞散敦敬斌斐斑斯普景晰晴晶晷智晾暂暑曾替最朝期棉棋棍棒棕棘棚棠棣森棰棱棵棹棺棼椁椅椋植椎椐椒椟椠椤椭椰楗楮榔欹欺款殖殚殛毯毳毵毽氮氯氰淼渝渡渣渤渥温渫渭港渲渴游渺湃湄湍湎湓湔湖湘湛湟湫湮湾湿溃溅溆溉溲滁滋滑滞焙焚焦焯焰焱然煮牌牍犀犄犊犋犍猢猥猩猬猱猴猸猹猾琚琛琢琥琦琨琪琬琮琰琳琴琵琶琼瑛瓿甥甯番畲畴疏痘痛痞痢痣痤痦痧痨痪痫登皓皖皴睃睇睐睑矬短硝硪硫硬确硷祺禄禅禽稀稂稃程稍税窖窗窘窜窝竣童竦筅等筋筌筏筐筑筒答策筘筚筛筝筵粞粟粢粤粥粪紫絮絷缂缃缄缅缆缇缈缉缋缌缎缏缑缒缓缔缕编缗缘缙羡翔翕翘耋耠聒联脔脾腆腈腊腋腌腑腓腔腕腙腚腱腴舄舒舜舾艇萱萼落葆葑葙葚葛葜葡董葩葫葬葭葱葳葵葶葸葺蒂蒇蒈蒉蒋蒌蒎蛐蛑蛔蛘蛙蛛蛞蛟蛤蛩蛭蛮蛰蛱蛲蛳蛴蜒蜓街裁裂装裎裒裕裙裢裣裤裥覃觌觚觞詈谟谠谡谢谣谤谥谦谧貂赋赌赍赎赏赐赓赔赕趁趄超越趋跆跋跌跎跏跑跖跗跚跛跞践辇辈辉辊辋辍辎辜逼逾遁遂遄遇遍遏遐遑遒道遗酡酢酣酤酥釉释量铸铹铺铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕阑阒阔阕隔隘隙雁雄雅集雇雯雳靓韩颉颊颌颍颏飓飧飨馇馈馊馋骗骘骚骛鱿鲁鲂鹁鹂鹃鹄鹅鹆鹇鹈黍黑黹鼋鼎&quot;,
 &quot;13&quot;:&quot;催傺傻像剽剿勤叠嗄嗅嗉嗌嗍嗑嗒嗓嗔嗜嗝嗡嗣嗤嗥嗦嗨嗪嗫嗬嗯嗲嗳嗵嗷嘟塌塍塑塘塞塥填塬墓媲媳媵媸媾嫁嫉嫌嫒嫔嫫寝寞尴嵊嵩嵴幌幕廉廒廓彀徭微想愁愆愈愍意愚感愫慈慊慎慑戤戥搋搌搏搐搛搞搠搡搦搪搬携摁摄摅摆摇摈摊摸敫数斟新旒暄暇暌暖暗椴椹椽椿楂楔楚楝楞楠楣楦楫楱楷楸楹楼榀概榄榆榇榈榉榘槌槎槐歃歆歇歌殿毁毂毹氲溏源溘溜溟溢溥溧溪溯溱溴溶溷溺溻溽滂滇滏滓滔滗滚滟滠满滢滤滥滦滨滩漓漠漭煅煊煌煎煜煞煤煦照煨煲煳煸煺牒犏献猷猿獒瑁瑕瑗瑙瑚瑜瑞瑟瑰甄畸畹痰痱痴痹痼痿瘀瘁瘃瘅瘐皙盟睚睛睡睢督睥睦睨睫睬睹瞄矮硼碇碉碌碍碎碑碓碗碘碚碛碜碰禀禁禊福稔稗稚稞稠稣窟窠窥窦筠筢筮筱筲筷筹筻签简粮粱粲粳缚缛缜缝缟缠缡缢缣缤罨罩罪置署群羧耢聘肄肆腠腥腧腩腭腮腰腹腺腻腼腽腾腿舅艄艉蒗蒙蒜蒡蒯蒲蒴蒸蒹蒺蒽蒿蓁蓄蓉蓊蓍蓐蓑蓓蓖蓝蓟蓠蓣蓥蓦蓬虞蛸蛹蛾蜂蜃蜇蜈蜉蜊蜍蜕蜗蜣衙裔裘裟裨裰裱裸裼裾褂褚觎觜解觥触訾詹誉誊谨谩谪谫谬豢貅貉貊赖趑趔跟跣跤跨跪跫跬路跳跷跸跹跺跻躲辏辐辑输辔辞辟遘遛遢遣遥遨鄙鄞鄢鄣酩酪酬酮酯酰酱鉴锖锗锘错锚锛锝锞锟锡锢锣锤锥锦锨锩锪锫锬锭键锯锰锱阖阗阙障雉雍雎雏零雷雹雾靖靳靴靶韪韫韵颐频颓颔颖飕馍馏馐骜骝骞骟骰骱髡魁魂鲅鲆鲇鲈鲋鲍鲎鲐鹉鹊鹋鹌鹎鹏鹑麂鼓鼠龃龄&quot;,
 &quot;14&quot;:&quot;龅龆僖僚僦僧僬僭僮僳儆兢凳劁劂厮嗽嗾嘀嘁嘈嘉嘌嘎嘏嘘嘛嘞嘣嘤嘧塾墁境墅墉墒墙墚夤夥嫖嫘嫜嫠嫡嫣嫦嫩嫱孵察寡寤寥寨屣嶂幔幛廑廖弊彰愿慕慝慢慵慷截戬搴搿摔摘摞摧摭摹摺撂撄撇撖敲斡旖旗暝暧暨榍榕榛榜榧榨榫榭榱榴榷榻槁槊槔槛槟槠槭模歉殡毓滴滹漂漆漉漏演漕漤漩漪漫漯漱漳漶漾潆潇潋潍潢潴澉煽熄熊熏熔熘熙熬犒獍獐瑭瑶瑷璃甍疑瘊瘌瘕瘗瘘瘙瘟瘥瘦瘩睽睾睿瞀瞅瞍碟碡碣碥碧碱碲碳碴碹磁磋禚稳窨窬窭竭端箅箍箐箔箕算箜箝管箢箦箧箨箩箪箫箬箸粹粼粽精糁綦綮缥缦缧缨缩缪缫罂罱罴翟翠翡翥耥聚肇腐膀膂膈膊膏膑膜臧舆舔舞艋蓰蓼蓿蔌蔑蔓蔗蔚蔟蔡蔫蔷蔸蔹蔺蔻蔼蔽蕖蜀蜘蜚蜜蜞蜡蜢蜥蜩蜮蜱蜴蜷蜻蜾蜿蝇蝈蝉螂裳裴裹褊褐褓褙褛褡褪觏觫誓谭谮谯谰谱谲豪貌赘赙赚赛赫跽踅踉踊踌辕辖辗辣遭遮鄯鄱酲酴酵酶酷酸酹酽酾酿銎銮锲锴锵锶锷锸锹锺锻锼锾锿镀镁镂镄镅阚隧雌雒需霁霆静靼鞅韬韶颗馑馒骠骡骢骶骷髦魃魄魅鲑鲒鲔鲕鲚鲛鲜鲞鲟鹕鹗鹘鹚鹛鹜麽鼐鼻&quot;,
 &quot;15&quot;:&quot;龇龈僵僻儇儋凛劈劐勰嘬嘭嘱嘲嘶嘹嘻嘿噌噍噎噔噗噘噙噜噢噶墀增墟墨墩嬉寮履屦嶙嶝幞幡幢廛影徵德慧慰憋憎憔憧憨憬懂戮摩撅撑撒撕撙撞撤撩撬播撮撰撵撷撸撺擒敷暮暴暹槲槽槿樊樗樘樟横樯樱橄橡橥毅滕潘潜潦潭潮潲潸潺潼澄澈澌澍澎澜澳熟熠熨熳熵牖獗獠瑾璀璁璇璋璎璜畿瘛瘠瘢瘤瘪瘫瘼瞌瞎瞑瞒瞢碾磅磉磊磐磔磕磙稷稹稻稼稽稿窳箭箱箴篁篆篇篌篑篓糅糇糈糊糌糍缬缭缮缯羯羰翦翩耦耧聩聪膘膛膝膣艏艘蔬蕃蕈蕉蕊蕙蕞蕤蕨蕲蕴蕺虢蝌蝎蝓蝗蝙蝠蝣蝤蝥蝮蝰蝴蝶蝻蝼蝽蝾螋褒褥褫褴觐觑觯谳谴谵豌豫赜赭趟趣踏踔踝踞踟踢踣踩踪踬踮踯踺躺辘遴遵醅醇醉醋醌鋈镆镇镉镊镌镍镎镏镐镑镒镓镔霄震霈霉靠靥鞋鞍鞑鞒题颚颛颜额飘餍馓馔骣骸骺骼髫髯魇鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲫鹞鹣鹤麾黎&quot;,
 &quot;16&quot;:&quot;齑龉龊儒冀凝劓嘴噤器噩噪噫噬噱噻噼嚆圜墼壁壅嬖嬗嬴寰廨廪徼憝憩憷憾懈懊懒懔撼擀擂擅操擎擐擗擞整斓暾樨樵樽樾橇橐橘橙橛橱橹橼檎檠歙殪氅氆氇潞澡澧澶澹激濂濉濑濒熹燃燎燔燕燠燧犟獬獭璞瓢甏甑瘭瘰瘳瘴瘵瘸瘾瘿癀癃盥瞟瞠瞥瞰磨磬磲磺禧穆穑窿篙篚篝篡篥篦篪篮篱篷糕糖糗糙缰缱缲缳缴罹羲翮翰翱耨耩耪聱膦膨膪膳臻蕹蕻蕾薄薅薇薏薛薜薤薨薪薮薯螃螅螈融螓螗螟螨螭螯蟆蟒衡褰褶赝赞赠踱踵踹踽蹀蹁蹂蹄蹉辙辚辨辩遽避邀邂鄹醍醐醑醒醚醛錾镖镗镘镙镛镜镝镞镟隰雕霍霎霏霓霖靛鞔鞘颞颟颠颡飙飚餐髭髹髻魈魉鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲸鲺鲻鹦鹧鹨鹾麇麈黉黔默&quot;,
 &quot;17&quot;:&quot;鼽儡嚅嚎嚏嚓壑壕嬲嬷孺嶷徽懋懑懦戴擘擢擤擦曙朦檀檄檐檑檗檩檬濞濠濡濮濯燥燮爵獯璐璨璩甓疃癌癍皤瞧瞩瞪瞬瞳瞵磴磷礁礅穗篼篾簇簋簌簏簖簧糜糟糠縻繁繇罄罅罾羁翳翼膺膻臀臁臂臃臆臊臌艚薰薷薹藁藉藏藐藓螫螬螳螵螺螽蟀蟊蟋蟑蟓蟥襁襄觳謇豁豳貔貘赡赢蹇蹈蹊蹋蹑蹒辫邃邈醢醣鍪镡镢镣镤镥镦镧镨镩镪镫隳霜霞鞠馘骤髀髁魍魏鲼鲽鳃鳄鳅鳆鳇鳊鳋鹩鹪鹫鹬麋黏黛黜黻鼢鼾龋&quot;,
 &quot;18&quot;:&quot;龌龠冁嚣彝懵戳曛曜檫瀑燹璧癔癖癜癞瞻瞽瞿礓礞簟簦簪糨翻艟藕藜藤藩蟛蟠蟪蟮襟覆謦蹙蹦蹩躇邋醪鎏鏊镬镭镯镰镱雠鞣鞫鞭鞯颢餮馥髂髅鬃鬈鳌鳍鳎鳏鳐鹭鹰&quot;,
 &quot;19&quot;:&quot;黝黟黠鼬嚯孽巅攀攉攒曝瀚瀛瀣爆璺瓣疆癣礤簸簿籀籁缵羸羹艨藻藿蘅蘑蘧蟹蟾蠃蠊蠓蠖襞襦警谶蹬蹭蹯蹰蹲蹴蹶蹼蹿酃醭醮醯鏖镲霪霭靡鞲鞴颤骥髋髌鬏魑鳓鳔鳕鳖鳗鳘鳙鹱麒麓&quot;,
 &quot;20&quot;:&quot;麴黢黼鼗嚷嚼壤孀巍攘曦瀵瀹灌獾瓒矍籍糯纂耀蘖蘩蠕蠛譬躁躅酆醴醵镳霰颥馨骧鬓魔鳜鳝鳞&quot;,
 &quot;21&quot;:&quot;鳟黥黧黩黪鼍鼯夔曩灏爝癫礴禳羼蠡蠢赣躏醺鐾露霸霹颦髓&quot;,
 &quot;22&quot;:&quot;鳢麝黯鼙囊懿氍瓤穰耱蘸蘼躐躔镶&quot;,
 &quot;23&quot;:&quot;霾饔饕髑鬻鹳麟攥攫癯罐趱躜颧&quot;,
 &quot;24&quot;:&quot;鬟鼷鼹齄灞矗蠲蠹衢襻躞鑫&quot;,
 &quot;25&quot;:&quot;鬣馕囔戆攮纛&quot;,
 &quot;26&quot;:&quot;蠼爨&quot;}

</code></pre>

<ul>
<li><p>比特匹配汉字笔画数组</p>
<pre><code class="language-text">[10,7,10, 10, 8, 10, 9, 11, 17, 14, 13, 5, 13, 10, 12, 15, 10, 6,
10,9,13, 8, 10, 10, 8, 8, 10, 5, 10, 14, 16, 9, 12, 12, 15, 15, 7, <br/>
10,5, 5, 7, 10, 2, 9, 4, 8, 12, 13, 7, 10, 7, 21, 10, 8, 5, 9, 6, 13,<br/>
8, 8, 9, 13, 12, 10, 13, 7, 10, 10, 8, 8, 7, 8, 7, 19, 5, 4, 8, 5,<br/>
9, 10, 14, 14, 9, 12, 15, 10, 15, 12, 12, 8, 9, 5, 15, 10,<br/>
16, 13, 9, 12, 8, 8, 8, 7, 15, 10, 13, 19, 8, 13, 12, 8, 5, 12, 9,<br/>
4, 9, 10, 7, 8, 12, 12, 10, 8, 8, 5, 11, 11, 11, 9, 9, 18, 9, 12,<br/>
14, 4, 13, 10, 8, 14, 13, 14, 6, 10, 9, 4, 7, 13, 6, 11, 14, 5, 13,<br/>
16, 17, 16, 9, 18, 5, 12, 8, 9, 9, 8, 4, 16, 16, 17, 12, 9, 11, 15,<br/>
8, 19, 16, 7, 15, 11, 12, 16, 13, 10, 13, 7, 6, 9, 5, 8, 9, 9,<br/>
10, 6, 8, 11, 15, 8, 10, 8, 12, 9, 13, 10, 14, 7, 8, 11, 11, 14,<br/>
12, 8, 7, 10, 2, 10, 7, 11, 4, 5, 7, 19, 10, 8, 17, 11, 12, 7, 3,<br/>
7, 12, 15, 8, 11, 11, 14, 16, 8, 10, 9, 11, 11, 7, 7, 10, 4, 7, 17,<br/>
16, 16, 15, 11, 9, 8, 12, 8, 5, 9, 7, 19, 12, 3, 9, 9, 9, 14, 12,<br/>
14, 7, 9, 8, 8, 10, 10, 12, 11, 14, 12, 11, 13, 11, 6, 11, 19, 8,<br/>
11,<br/>
6, 9, 11, 4, 11, 7, 2, 12, 8, 11, 10, 12, 7, 9, 12, 15, 15, 11, 7,<br/>
8, 4, 7, 15, 12, 7, 15, 10, 6, 7, 6, 11, 7, 7, 7, 12, 8, 15, 10, 9,<br/>
16, 6, 7, 10, 12, 12, 15, 8, 8, 10, 10, 10, 6, 13, 9, 11, 6, 7, 6,<br/>
6, 10, 8, 8, 4, 7, 10, 5, 9, 6, 6, 6, 11, 8, 8, 13, 12, 14, 13, 13,<br/>
13, 4, 11, 14, 4, 10, 7, 5, 16, 12, 18, 12, 13, 12, 9, 13,<br/>
10, 12, 24, 13, 13, 5, 12, 3, 9, 13, 7, 11, 12, 7, 9, 12, 15, 7, 6,<br/>
6, 7, 8, 11, 13, 8, 9, 13, 15, 10, 11, 7, 21, 18, 11, 11, 9, 14,<br/>
14, 13, 13, 10, 7, 6, 8, 12, 6, 15, 12, 7, 5, 4, 5, 11, 11, 15, 17,<br/>
9, 19, 16, 12, 14, 11, 13, 10, 13, 14, 11, 14, 7, 6, 3, 14, 15, 12,<br/>
11, 10, 13, 12, 6, 12, 14, 5, 3, 7, 4, 12, 17, 9, 9, 5, 9, 11, 9,<br/>
11,<br/>
9, 10, 8, 4, 8, 10, 11, 9, 5, 12, 7, 11, 11, 8, 11, 11, 6, 9, 10,<br/>
9, 10, 2, 10, 17, 10, 7, 11, 6, 8, 15, 11, 12, 11, 15, 11, 8, 19,<br/>
6, 12, 12, 17, 14, 4, 12, 7, 14, 8, 10, 11, 7, 10, 14, 14, 8, 8, 6,<br/>
12, 11, 9, 7, 10, 12, 16, 11, 13, 13, 9, 8, 16, 9, 5, 7, 7, 8, 11,<br/>
12, 11, 13, 13, 5, 16, 10, 2, 11, 6, 8, 10, 12, 10, 14, 15, 8, 11,<br/>
13,<br/>
2, 7, 5, 7, 8, 12, 13, 8, 4, 6, 5, 5, 12, 15, 6, 9, 8, 9, 7, 9, 11,<br/>
7, 4, 9, 7, 10, 12, 10, 13, 9, 12, 9, 10, 11, 13, 12, 7, 14, 7, 9,<br/>
12, 7, 14, 12, 14, 9, 11, 12, 11, 7, 4, 5, 15, 7, 19, 12, 10, 7, 9,<br/>
9, 12, 11, 9, 6, 6, 9, 13, 6, 13, 11, 8, 12, 11, 13, 10, 12, 9, 15,<br/>
6, 10, 10, 4, 7, 12, 11, 10, 10, 6, 2, 6, 5, 9, 9, 2,<br/>
9, 5, 9, 12, 6, 4, 9, 8, 9, 18, 6, 12, 18, 15, 8, 8, 17, 3, 10, 4,<br/>
7, 8, 8, 5, 7, 7, 7, 7, 4, 8, 8, 6, 7, 6, 6, 7, 8, 11, 8, 11, 3, 8,<br/>
10, 10, 7, 8, 8, 8, 9, 7, 11, 7, 8, 4, 7, 7, 12, 7, 10, 8, 6, 8,<br/>
12, 12, 4, 9, 8, 13, 10, 12, 4, 9, 11, 10, 5, 13, 6, 8, 4, 7, 7, 4,<br/>
15, 8, 14, 7, 8, 13, 12, 9, 11, 6, 9, 8,<br/>
10, 11, 13, 11, 5, 7, 7, 11, 10, 10, 8, 11, 12, 8, 14, 9, 11, 18,<br/>
12, 9, 12, 5, 8, 4, 13, 6, 12, 4, 7, 6, 13, 8, 15, 14, 8, 7, 13, 9,<br/>
11, 12, 3, 5, 7, 9, 9, 7, 10, 13, 8, 11, 21, 4, 6, 9, 9, 7, 7, 7,<br/>
12, 7, 16, 10, 10, 14, 10, 16, 13, 15, 15, 7, 10, 14, 12, 4, 11,<br/>
10, 8, 12, 9, 12, 10, 12, 9, 12, 11, 3, 6, 9, 10, 13, 10, 7, 8, 19,<br/>
10, 10, 11, 3, 7, 5, 10, 11, 8, 10, 4, 9, 3, 6, 7, 9, 7, 6, 9, 4,<br/>
7, 8, 8, 9, 8, 8, 11, 12, 11, 8, 14, 7, 8, 8, 8, 13, 5, 11, 9, 7,<br/>
8, 9, 10, 8, 12, 8, 5, 9, 14, 9, 13, 8, 8, 8, 12, 6, 8, 9, 6, 14,<br/>
11, 23, 12, 20, 8, 6, 3, 10, 13, 8, 6, 11, 5, 7, 9, 6, 9, 8, 9, 10,<br/>
8, 13, 9, 8, 12, 13, 12, 12, 10, 8, 8, 14, 6, 9, 15, 9, 10, 10, 6,<br/>
10, 9, 12, 14, 7, 12, 7, 11, 12, 8, 12, 7, 16, 16, 10, 7, 16, 10,<br/>
11, 6, 5, 5, 8, 10, 17, 17, 14, 11, 9, 6, 10, 5, 10, 8, 12, 10, 11,<br/>
10, 5, 8, 7, 6, 11, 13, 9, 8, 11, 14, 14, 15, 9, 15, 12, 11, 9, 9,<br/>
9, 10, 7, 15, 16, 9, 8, 9, 10, 9, 11, 9, 7, 5, 6, 12, 9, 12, 7, 9,<br/>
10, 6, 8, 5, 8, 13, 10, 12, 9, 15, 8, 15, 12,<br/>
8, 8, 11, 7, 4, 7, 4, 7, 9, 6, 12, 12, 8, 6, 4, 8, 13, 9, 7, 11, 7,<br/>
6, 8, 10, 7, 12, 10, 11, 10, 12, 13, 11, 10, 9, 4, 9, 12, 11, 16,<br/>
15, 17, 9, 11, 12, 13, 10, 13, 9, 11, 6, 9, 12, 17, 9, 12, 6, 13,<br/>
10, 15, 5, 12, 11, 10, 11, 6, 10, 5, 6, 9, 9, 9, 8, 11, 13, 9, 11,<br/>
17, 9, 6, 4, 10, 8, 12, 16, 8, 11, 5, 6, 11, 6, 13, 15, 10, 14,<br/>
6, 5, 9, 16, 4, 7, 10, 11, 12, 6, 7, 12, 13, 20, 12, 3, 9, 10, 6,<br/>
7, 13, 6, 9, 2, 10, 3, 13, 7, 16, 8, 6, 11, 8, 11, 9, 11, 11, 4, 5,<br/>
9, 7, 7, 7, 10, 6, 14, 9, 6, 8, 10, 5, 9, 12, 10, 5, 10, 11, 15, 6,<br/>
9, 8, 13, 7, 10, 7, 6, 11, 7, 13, 10, 8, 8, 6, 12, 9, 11, 9, 14,<br/>
12, 8, 10, 13, 9, 11, 11, 9, 14, 13, 12, 9, 4, 13, 15, 6,<br/>
10, 10, 9, 8, 11, 12, 10, 8, 15, 9, 9, 10, 6, 19, 12, 10, 9, 6, 6,<br/>
13, 8, 15, 12, 17, 12, 10, 6, 8, 9, 9, 9, 20, 12, 11, 11, 8, 11, 9,<br/>
7, 9, 16, 9, 13, 11, 14, 10, 10, 5, 12, 12, 11, 9, 11, 12, 6, 14,<br/>
7, 5, 10, 8, 11, 13, 14, 9, 9, 13, 8, 7, 17, 7, 9, 10, 4, 9, 9, 8,<br/>
3, 12, 4, 8, 4, 9, 18, 10, 13, 4, 13, 7, 13, 10, 13, 7, 10, 10,<br/>
6, 7, 9, 14, 8, 13, 12, 16, 8, 11, 14, 13, 8, 4, 19, 12, 11, 14,<br/>
14, 12, 16, 8, 10, 13, 11, 10, 8, 9, 12, 12, 7, 5, 7, 9, 3, 7, 2,<br/>
10, 11, 11, 5, 6, 13, 8, 12, 8, 17, 8, 8, 10, 8, 8, 11, 7, 8, 9, 9,<br/>
8, 14, 7, 11, 4, 8, 11, 15, 13, 10, 5, 11, 8, 10, 10, 12, 10, 10,<br/>
11, 8, 10, 15, 23, 7, 11, 10, 17, 9, 6, 6, 9, 7, 11, 9, 6, 7, 10,<br/>
9, 12, 10, 9, 10, 12, 8, 5, 9, 4, 12, 13, 8, 12, 5, 12, 11, 7, 9,<br/>
9, 11, 14, 17, 6, 7, 4, 8, 6, 9, 10, 15, 8, 8, 9, 12, 15, 14, 9, 7,<br/>
9, 5, 12, 7, 8, 9, 10, 8, 11, 9, 10, 7, 7, 8, 10, 4, 11, 7, 3, 6,<br/>
11, 9, 10, 13, 8, 14, 7, 12, 6, 9, 9, 13, 10, 7, 13, 8, 7, 10, 12,<br/>
6, 12, 7, 10, 8, 11, 7, 7, 3, 11, 8, 13, 12, 9, 13, 11,<br/>
12, 12, 12, 8, 8, 10, 7, 9, 6, 13, 12, 8, 8, 12, 14, 12, 14, 11,<br/>
10, 7, 13, 13, 11, 9, 8, 16, 12, 5, 15, 14, 12, 9, 16, 12, 9, 13,<br/>
11, 12, 10, 11, 8, 10, 10, 10, 7, 7, 6, 8, 9, 13, 10, 10, 11, 5,<br/>
13, 18, 16, 15, 11, 17, 9, 16, 6, 9, 8, 12, 13, 7, 9, 11, 11, 15,<br/>
16, 10, 10, 13, 11, 7, 7, 15, 5, 10, 9, 6, 10, 7, 5, 7, 10, 4, 7,<br/>
12, 8, 9,<br/>
12, 5, 11, 7, 8, 2, 14, 10, 9, 12, 10, 7, 18, 13, 8, 10, 8, 11, 11,<br/>
12, 10, 9, 8, 13, 10, 11, 13, 7, 7, 11, 12, 12, 9, 10, 15, 11, 14,<br/>
7, 16, 14, 5, 15, 2, 14, 17, 14, 10, 6, 12, 10, 6, 11, 12, 8, 17,<br/>
16, 9, 7, 20, 11, 15, 10, 7, 8, 9, 11, 13, 13, 10, 7, 11, 10, 7,<br/>
10, 8, 11, 5, 5, 13, 11, 14, 12, 13, 10, 6, 15, 10, 9, 4, 5, 11, 8,<br/>
11, 16,<br/>
11, 8, 8, 7, 13, 9, 12, 15, 14, 8, 7, 5, 11, 7, 8, 11, 7, 8, 12,<br/>
19, 13, 21, 13, 10, 11, 16, 12, 8, 7, 15, 7, 6, 11, 8, 10, 15, 12,<br/>
12, 10, 12, 9, 11, 13, 11, 9, 10, 9, 13, 7, 7, 11, 11, 7, 8, 6, 4,<br/>
7, 7, 6, 11, 17, 8, 11, 13, 14, 14, 13, 12, 9, 9, 9, 6, 11, 7, 8,<br/>
9, 3, 9, 14, 6, 10, 6, 7, 8, 6, 9, 15, 14, 12, 13, 14, 11, 14, 14,<br/>
13, 6, 9, 8, 8, 6, 10, 11, 8, 13, 4, 5, 10, 5, 8, 9, 12, 14, 9, 3,<br/>
8, 8, 11, 14, 15, 13, 7, 9, 12, 14, 7, 9, 9, 12, 8, 12, 3, 7, 5,<br/>
11, 13, 17, 13, 13, 11, 11, 8, 11, 15, 19, 17, 9, 11, 8, 6, 10, 8,<br/>
8, 14, 11, 12, 12, 10, 11, 11, 7, 9, 10, 12, 9, 8, 11, 13, 17, 9,<br/>
12, 8, 7, 14, 5, 5, 8, 5, 11, 10, 9, 8, 16, 8, 11, 6, 8, 13, 13,<br/>
14, 19, 14, 14, 16, 15, 20, 8, 5, 10, 15, 16, 8, 13, 13, 8, 11, 6,<br/>
9, 8, 7, 7, 8, 5, 13, 14, 13, 12, 14, 4, 5, 13, 8, 16, 10, 9, 7, 9,<br/>
6, 9, 7, 6, 2, 5, 9, 8, 9, 7, 10, 22, 9, 10, 9, 8, 11, 8, 10, 4,<br/>
14, 10, 8, 16, 10, 8, 5, 7, 7, 10, 13, 9, 13, 14, 8, 6, 15, 15, 11,<br/>
8, 10, 14, 5, 7, 10, 10, 19, 11, 15, 15, 10, 11, 9, 8, 16, 5,<br/>
8, 8, 4, 7, 9, 7, 10, 9, 6, 7, 5, 7, 9, 3, 13, 9, 8, 9, 17, 20, 10,<br/>
10, 8, 9, 8, 18, 7, 11, 7, 11, 9, 8, 8, 8, 12, 8, 11, 12, 11, 12,<br/>
9, 19, 15, 11, 15, 9, 10, 7, 9, 6, 8, 10, 16, 9, 7, 8, 7, 9, 10,<br/>
12, 8, 8, 9, 11, 14, 12, 10, 10, 8, 7, 12, 9, 10, 8, 11, 15, 12,<br/>
13, 12, 13, 16, 16, 8, 13, 11, 13, 8, 9, 21, 7, 8, 15, 12, 9,<br/>
11, 12, 10, 5, 4, 12, 15, 7, 20, 15, 11, 4, 12, 15, 14, 16, 11, 14,<br/>
16, 9, 13, 8, 9, 13, 6, 8, 8, 11, 5, 8, 10, 7, 9, 8, 8, 11, 11, 10,<br/>
14, 8, 11, 10, 5, 12, 4, 10, 12, 11, 13, 10, 6, 10, 12, 10, 14, 19,<br/>
18, 12, 12, 10, 11, 8, 2, 10, 14, 9, 7, 8, 12, 8, 8, 11, 11, 10, 6,<br/>
14, 8, 6, 11, 10, 6, 3, 6, 7, 9, 9, 16, 4, 6, 7, 7, 8, 5, 11,<br/>
9, 9, 9, 6, 8, 10, 3, 6, 13, 5, 12, 11, 16, 10, 10, 9, 15, 13, 8,<br/>
15, 11, 12, 4, 14, 8, 7, 12, 7, 14, 14, 12, 7, 16, 14, 14, 10, 10,<br/>
17, 6, 8, 5, 16, 15, 12, 10, 9, 10, 4, 8, 5, 8, 9, 9, 9, 9, 10, 12,<br/>
13, 7, 15, 12, 13, 7, 8, 9, 9, 10, 10, 11, 16, 12, 12, 11, 8, 10,<br/>
6, 12, 7, 9, 5, 7, 11, 7, 5, 9, 8, 12, 4, 11, 6, 11, 8, 7, 11,<br/>
8, 11, 17, 15, 5, 11, 23, 6, 16, 10, 6, 11, 10, 4, 8, 4, 10, 8, 16,<br/>
7, 13, 14, 12, 11, 12, 13, 12, 16, 5, 9, 22, 20, 20, 20, 5, 9, 7,<br/>
9, 12, 10, 4, 4, 2, 7, 7, 6, 4, 3, 7, 6, 5, 4, 4, 6, 9, 13, 9, 16,<br/>
14, 13, 10, 9, 4, 12, 9, 6, 9, 20, 16, 17, 6, 10, 8, 6, 2, 15, 8,<br/>
6, 15, 13, 12, 7, 10, 8, 10, 15, 9, 11, 13, 17, 13, 14, 3, 8,<br/>
6, 12, 10, 13, 8, 12, 12, 6, 12, 13, 6, 10, 12, 14, 10, 9, 6, 8, 7,<br/>
7, 13, 11, 13, 12, 10, 9, 8, 7, 3, 7, 14, 8, 5, 8, 16, 17, 16, 12,<br/>
6, 10, 15, 14, 6, 11, 12, 10, 3, 8, 14, 11, 10, 12, 10, 6, 3, 14,<br/>
4, 10, 7, 8, 11, 11, 11, 6, 8, 11, 13, 10, 13, 10, 7, 6, 10, 5, 8,<br/>
7, 7, 11, 10, 8, 9, 7, 8, 11, 9, 8, 13, 11, 7, 5, 12, 9, 4, 11,<br/>
9, 11, 12, 9, 5, 6, 5, 9, 9, 12, 8, 3, 8, 2, 5, 9, 7, 4, 9, 9, 8,<br/>
7, 5, 5, 8, 9, 8, 8, 6, 5, 3, 5, 9, 8, 9, 14, 10, 8, 9, 13, 16, 9,<br/>
5, 8, 12, 8, 4, 5, 9, 9, 8, 8, 6, 4, 9, 6, 7, 11, 11, 8, 14, 11,<br/>
15, 8, 11, 10, 7, 13, 8, 12, 11, 12, 4, 12, 11, 15, 16, 12, 17, 13,<br/>
13, 12, 13, 12, 5, 8, 9, 7, 6, 9, 14, 11, 13, 14,<br/>
10, 8, 9, 14, 10, 5, 5, 10, 9, 17, 4, 11, 10, 4, 13, 12, 7, 17, 9,<br/>
12, 9, 11, 10, 9, 12, 15, 15, 9, 7, 5, 5, 6, 13, 6, 13, 5, 7, 6, 8,<br/>
3, 8, 10, 8, 10, 9, 7, 6, 9, 12, 15, 16, 14, 7, 12, 9, 10, 10, 12,<br/>
14, 13, 13, 11, 7, 8, 14, 13, 14, 9, 11, 11, 10, 21, 13, 6, 17, 12,<br/>
14, 10, 6, 10, 10, 13, 11, 10, 14, 11, 10, 12, 8, 13, 5, 5, 6, 12,<br/>
16, 9, 17, 15, 9, 8, 8, 5, 10, 11, 4, 8, 7, 7, 13, 8, 15, 13, 7,<br/>
17, 13, 15, 14, 10, 8, 12, 10, 14, 11, 5, 9, 6, 13, 13, 11, 12, 15,<br/>
10, 16, 10, 15, 11, 15, 10, 11, 10, 13, 10, 11, 10, 9, 11, 10, 5,<br/>
10, 10, 18, 13, 10, 13, 11, 10, 15, 12, 12, 15, 16, 12, 7, 12, 17,<br/>
11, 10, 9, 8, 4, 11, 13, 5, 11, 9, 14, 12, 9, 7, 8, 11, 13, 9, 10,<br/>
8, 4, 7, 9,<br/>
5, 6, 11, 9, 9, 9, 12, 10, 10, 13, 17, 6, 11, 7, 12, 11, 10, 12, 9,<br/>
12, 11, 7, 5, 10, 5, 7, 9, 8, 10, 10, 10, 11, 3, 6, 8, 12, 6, 11,<br/>
13, 13, 13, 14, 9, 7, 4, 17, 8, 6, 11, 10, 7, 6, 8, 12, 7, 8, 12,<br/>
9, 9, 12, 9, 9, 4, 10, 9, 5, 15, 9, 12, 8, 10, 3, 11, 7, 13, 10,<br/>
11, 12, 11, 8, 11, 3, 12, 7, 4, 3, 8, 6, 8, 8, 11, 7, 6, 9,<br/>
20, 13, 6, 4, 7, 10, 7, 11, 11, 4, 14, 11, 7, 11, 8, 6, 6, 7, 7, 5,<br/>
14, 8, 9, 9, 12, 17, 7, 12, 11, 11, 15, 3, 14, 12, 10, 4, 9, 7, 7,<br/>
14, 10, 6, 13, 10, 8, 9, 13, 10, 12, 7, 14, 8, 12, 7, 7, 7, 9, 4,<br/>
6, 9, 9, 4, 7, 11, 7, 7, 4, 8, 4, 10, 4, 14, 6, 9, 7, 5, 13, 11, 8,<br/>
4, 5, 10, 9, 8, 14, 8, 6, 11, 8, 12, 15, 6, 13, 10,<br/>
12, 10, 7, 11, 15, 3, 11, 14, 11, 13, 6, 12, 17, 11, 10, 3, 13, 12,<br/>
11, 9, 7, 12, 6, 8, 15, 9, 7, 17, 14, 13, 9, 8, 9, 3, 12, 10, 6,<br/>
11, 13, 6, 5, 14, 6, 9, 8, 11, 11, 7, 9, 8, 13, 9, 9, 8, 13, 7, 13,<br/>
11, 12, 9, 10, 8, 8, 9, 11, 22, 9, 15, 17, 12, 3, 12, 10, 8, 13, 9,<br/>
8, 9, 9, 15, 13, 6, 11, 11, 12, 15, 9, 10, 18, 12, 10, 10, 11, 10,<br/>
3, 7, 10, 7, 11, 10, 10, 13, 8, 13, 15, 15, 6, 9, 13, 6, 11, 8, 11,<br/>
5, 11, 9, 19, 16, 8, 8, 12, 10, 16, 7, 12, 8, 7, 13, 7, 4, 9, 11,<br/>
9, 13, 12, 12, 6, 6, 9, 7, 6, 6, 16, 8, 7, 8, 8, 5, 4, 10, 6, 7,<br/>
12, 14, 6, 9, 10, 6, 13, 12, 7, 10, 10, 14, 6, 14, 11, 14, 9, 10,<br/>
6, 13, 11, 9, 6, 7, 10, 9, 12, 12, 11, 11, 7, 12, 9, 11, 11, 5,<br/>
9, 19, 10, 9, 13, 16, 8, 5, 11, 6, 9, 14, 12, 6, 8, 6, 6, 6, 10, 6,<br/>
5, 5, 9, 6, 6, 8, 9, 10, 7, 3, 7, 4, 10, 11, 13, 11, 12, 9, 6, 6,<br/>
11, 9, 11, 10, 11, 10, 7, 9, 12, 8, 7, 7, 15, 11, 8, 8, 8, 11, 11,<br/>
9, 14, 10, 12, 16, 6, 9, 12, 10, 9, 12, 10, 11, 10, 9, 5, 10, 10,<br/>
7, 6, 8, 8, 6, 9, 6, 10, 6, 11, 9, 10, 14, 16, 13, 7, 14,<br/>
13, 6, 13, 11, 12, 9, 9, 10, 9, 9, 20, 12, 15, 8, 6, 11, 7, 3, 6,<br/>
11, 5, 5, 6, 12, 8, 11, 1, 12, 7, 12, 11, 8, 6, 6, 13, 6, 12, 11,<br/>
5, 10, 14, 7, 8, 9, 18, 12, 9, 10, 3, 1, 7, 4, 4, 7, 8, 7, 6, 3, 7,<br/>
17, 11, 13, 9, 6, 13, 13, 15, 4, 3, 10, 13, 8, 5, 10, 7, 6, 17, 11,<br/>
8, 9, 9, 6, 10, 9, 6, 8, 7, 11, 11, 11, 7, 4, 4, 11,<br/>
5, 8, 15, 11, 18, 7, 14, 10, 11, 11, 9, 14, 7, 17, 9, 15, 13, 12,<br/>
9, 9, 8, 7, 17, 10, 11, 13, 14, 13, 8, 8, 10, 5, 11, 9, 5, 9, 6,<br/>
11, 7, 4, 5, 7, 10, 7, 8, 12, 7, 6, 4, 5, 7, 12, 9, 2, 5, 6, 11, 3,<br/>
8, 13, 13, 13, 14, 7, 9, 12, 8, 12, 12, 11, 11, 4, 10, 8, 3, 6, 9,<br/>
6, 9, 6, 5, 11, 6, 8, 6, 12, 12, 10, 12, 13, 11, 9, 8, 13,<br/>
10, 12, 12, 10, 15, 5, 10, 11, 10, 4, 9, 10, 10, 12, 14, 7, 7, 10,<br/>
13, 13, 12, 7, 8, 14, 9, 9, 4, 6, 12, 11, 9, 8, 12, 4, 10, 10, 10,<br/>
4, 9, 4, 9, 4, 7, 15, 11, 10, 13, 5, 5, 10, 6, 10, 9, 7, 10, 10, 6,<br/>
6, 9, 19, 12, 16, 10, 10, 12, 14, 17, 12, 19, 8, 6, 16, 9, 20, 16,<br/>
10, 7, 7, 17, 8, 8, 6, 8, 10, 9, 15, 15, 12, 16, 4, 12, 12, 5, 5,<br/>
11, 8, 9, 9, 14, 8, 5, 9, 7, 14, 10, 6, 10, 10, 14, 18, 9, 13, 11,<br/>
8, 10, 8, 14, 11, 10, 22, 9, 5, 9, 10, 12, 11, 15, 11, 14, 14, 7,<br/>
12, 10, 7, 3, 7, 8, 5, 8, 16, 13, 8, 9, 7, 8, 9, 13, 13, 6, 14, 5,<br/>
14, 7, 10, 12, 16, 8, 13, 14, 7, 10, 9, 13, 10, 13, 10, 16, 6, 7,<br/>
8, 8, 10, 7, 15, 10, 15, 6, 13, 9, 11, 8, 9, 6, 8, 16, 9, 5, 9,<br/>
9, 10, 8, 7, 6, 8, 4, 7, 14, 8, 8, 10, 5, 3, 8, 11, 8, 12, 12, 6,<br/>
10, 8, 7, 9, 4, 11, 5, 6, 7, 7, 10, 11, 6, 10, 13, 8, 9, 8, 12, 10,<br/>
13, 8, 8, 11, 12, 8, 11, 4, 9, 8, 9, 10, 8, 9, 8, 9, 6, 6, 6, 8, 6,<br/>
9, 7, 12, 9, 7, 8, 8, 10, 8, 9, 17, 10, 10, 12, 6, 11, 10, 8, 10,<br/>
6, 10, 12, 8, 17, 15, 5, 11, 9, 7, 11, 8, 12, 12,<br/>
7, 8, 9, 8, 7, 4, 9, 4, 9, 8, 15, 14, 15, 10, 6, 12, 6, 15, 6, 7,<br/>
12, 13, 9, 14, 7, 11, 10, 10, 10, 8, 8, 10, 12, 8, 10, 11, 11, 7,<br/>
9, 9, 9, 10, 9, 12, 11, 7, 12, 5, 9, 13, 3, 6, 11, 6, 18, 12, 15,<br/>
8, 11, 9, 7, 7, 7, 9, 12, 10, 7, 8, 11, 9, 7, 7, 8, 10, 20, 16, 15,<br/>
12, 13, 12, 15, 9, 5, 7, 9, 11, 7, 7, 10, 0, 0, 0, 0, 0,<br/>
3, 3, 3, 4, 4, 4, 5, 6, 6, 10, 10, 16, 1, 8, 1, 2, 3, 4, 4, 5, 5,<br/>
6, 9, 11, 14, 14, 19, 1, 8, 14, 2, 6, 4, 7, 7, 11, 14, 4, 6, 10,<br/>
11, 12, 14, 15, 16, 2, 5, 8, 11, 11, 15, 8, 7, 2, 4, 6, 7, 8, 8, 8,<br/>
9, 10, 10, 10, 13, 13, 14, 14, 15, 16, 2, 8, 2, 4, 4, 4, 5, 5, 5,<br/>
5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7,<br/>
7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,<br/>
9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11,<br/>
11, 11, 11, 11, 11, 11, 12, 12, 12, 13, 14, 14, 14, 14, 14, 14, 15,<br/>
15, 5, 6, 7, 7, 9, 17, 6, 8, 4, 12, 16, 17, 18, 21, 2, 9, 9, 11, 6,<br/>
6, 7, 2, 8, 10, 10, 11, 12, 12, 12, 13, 16, 19, 19, 2, 6, 8, 8,<br/>
10, 2, 10, 10, 2, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8,<br/>
8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11,<br/>
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13,<br/>
14, 14, 14, 15, 15, 19, 2, 8, 2, 5, 5, 6, 6, 7, 7, 7, 7, 8, 9, 9,<br/>
10, 10, 10, 11, 11, 11, 16, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7,<br/>
7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 11, 11, 13, 13,<br/>
13, 14, 14, 16, 19, 17, 5, 7, 5, 7, 7, 8, 10, 10, 11, 15, 9, 17,<br/>
20, 2, 2, 6, 10, 2, 5, 10, 12, 7, 9, 9, 14, 16, 16, 17, 6, 6, 6, 6,<br/>
6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,<br/>
9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11,<br/>
11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14, 15, 20, 21,<br/>
22, 3, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,<br/>
7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,<br/>
8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,<br/>
9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,<br/>
9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,<br/>
10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11,<br/>
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,<br/>
11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,<br/>
12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,<br/>
13, 14, 14, 14, 14, 14, 14, 14,<br/>
14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16,<br/>
16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 19, 19, 19, 20, 20, 22,<br/>
3, 9, 6, 7, 9, 9, 10, 10, 11, 3, 5, 5, 12, 3, 6, 7, 8, 8, 8, 8, 9,<br/>
9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,<br/>
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13,<br/>
13, 14, 14, 14, 14,<br/>
14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 19, 23, 25, 3, 7, 8, 12, 5,<br/>
5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8,<br/>
8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,<br/>
9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10,<br/>
10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,<br/>
11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12,<br/>
12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13,<br/>
13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14,<br/>
14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16,<br/>
16, 16, 16, 16, 17, 17, 19, 25, 3, 6, 6, 7, 7, 8, 9, 10, 11, 11,<br/>
16, 7, 8, 8, 8, 10, 11, 11,<br/>
11, 12, 14, 14, 15, 15, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8,<br/>
8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 11, 11, 11, 11, 11, 11,<br/>
11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 14, 15, 15,<br/>
17, 17, 19, 3, 7, 8, 9, 9, 9, 10, 11, 11, 12, 13, 15, 16, 24, 3, 3,<br/>
5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10,<br/>
10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 14, 14, 15,<br/>
15, 16, 17, 20, 6, 14, 12, 14, 3, 3, 6, 7, 7, 7, 7, 7, 8, 9, 10,<br/>
10, 11, 12, 12, 13, 13, 14, 15, 15, 25, 5, 7, 7, 8, 9, 9, 11, 11,<br/>
11, 11, 12, 13, 14, 15, 16, 16, 17, 3, 5, 6, 6, 7, 7, 7, 7, 7, 7,<br/>
7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9,<br/>
9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11,<br/>
11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 14, 15, 15, 15, 16, 16, 18,<br/>
8, 17, 4, 6, 7, 7, 7, 7, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11,<br/>
12, 12, 13, 13, 13, 14, 3, 4, 8, 3, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7,<br/>
7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,<br/>
9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10,<br/>
10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11,<br/>
11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,<br/>
12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,<br/>
13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15,<br/>
15, 15, 15, 15, 16,<br/>
16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 19, 19, 19, 20, 20, 21, 24,<br/>
3, 5, 8, 8, 9, 10, 12, 13, 14, 14, 15, 16, 16, 17, 17, 3, 7, 7, 8,<br/>
8, 8, 8, 8, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12,<br/>
12, 12, 12, 13, 13, 13, 13, 15, 15, 16, 16, 17, 17, 18, 3, 11, 9,<br/>
12, 5, 9, 10, 10, 12, 14, 15, 21, 8, 8, 9, 11, 12, 22, 3, 6, 6, 7,<br/>
7, 7, 7,<br/>
7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10,<br/>
10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13,<br/>
13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 16, 16, 17, 17, 20,<br/>
5, 9, 7, 8, 12, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 10, 11, 11,<br/>
11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 19, 20, 3, 6, 6, 6, 6, 6,<br/>
7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11,<br/>
11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,<br/>
13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 16,<br/>
16, 16, 16, 19, 3, 15, 3, 8, 10, 6, 6, 8, 8, 8, 9, 9, 9, 9, 9, 9,<br/>
9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 12, 12, 12, 12, 12,<br/>
12, 12, 12,<br/>
12, 12, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16,<br/>
17, 17, 17, 18, 20, 20, 13, 13, 14, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8,<br/>
8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,<br/>
9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,<br/>
10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12,<br/>
12,<br/>
12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,<br/>
13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14,<br/>
14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16,<br/>
16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 13, 14, 8, 9, 9, 9,<br/>
11, 11, 11, 12, 12, 14, 16, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10,<br/>
10, 10, 10, 11, 12, 12,<br/>
12, 12, 13, 15, 16, 10, 5, 8, 11, 12, 12, 13, 13, 13, 14, 14, 8, 9,<br/>
12, 16, 16, 17, 4, 6, 6, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9,<br/>
10, 10, 10, 10, 10, 10, 11, 11, 12, 13, 13, 14, 14, 16, 18, 18, 20,<br/>
21, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 14, 9, 10, 11,<br/>
12, 13, 14, 15, 15, 9, 13, 6, 8, 9, 11, 11, 12, 12, 12, 13, 14, 10,<br/>
11, 12,<br/>
14, 17, 10, 10, 12, 12, 12, 13, 15, 16, 16, 22, 5, 6, 7, 7, 9, 10,<br/>
10, 11, 13, 4, 11, 13, 12, 13, 15, 9, 15, 6, 7, 7, 7, 8, 8, 8, 8,<br/>
8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10,<br/>
10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12,<br/>
12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 17, 17,<br/>
17, 17,<br/>
17, 16, 7, 11, 12, 13, 13, 16, 9, 9, 12, 13, 16, 16, 4, 13, 13, 17,<br/>
12, 15, 16, 8, 10, 10, 10, 11, 11, 13, 14, 7, 8, 8, 8, 9, 9, 9, 9,<br/>
9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14,<br/>
15, 15, 15, 15, 16, 16, 16, 18, 21, 30, 4, 11, 13, 16, 8, 8, 9, 11,<br/>
12, 4, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 12, 12, 13, 14, 16,<br/>
21, 7, 7,<br/>
9, 10, 10, 10, 10, 10, 10, 11, 13, 13, 14, 16, 16, 17, 17, 24, 4,<br/>
6, 8, 9, 12, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10,<br/>
10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 13, 13, 13, 13,<br/>
13, 14, 14, 14, 14, 14, 15, 15, 15, 16, 16, 17, 17, 18, 19, 18, 21,<br/>
11, 12, 17, 19, 8, 9, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12,<br/>
12, 12, 12, 13, 13,<br/>
13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 7, 8, 9, 9, 9,<br/>
10, 12, 13, 17, 9, 10, 10, 12, 13, 14, 14, 16, 17, 17, 10, 16, 23,<br/>
5, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,<br/>
10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,<br/>
10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,<br/>
11, 11, 11,<br/>
11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12,<br/>
12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13,<br/>
13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15,<br/>
15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17,<br/>
17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 19, 20, 14, 9, 12, 13, 9,<br/>
9, 10, 10, 11, 12, 12, 12, 13, 13,<br/>
15, 15, 16, 17, 18, 22, 9, 11, 12, 13, 17, 10, 11, 7, 7, 8, 9, 9,<br/>
10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12,<br/>
13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17,<br/>
17, 17, 18, 18, 22, 5, 7, 7, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10,<br/>
10, 10, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13,<br/>
14, 14, 14, 14, 14, 14, 14,<br/>
15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 18, 18, 18,<br/>
21, 23, 11, 12, 8, 8, 9, 9, 10, 11, 13, 13, 14, 14, 14, 15, 5, 8,<br/>
9, 9, 9, 9, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 13,<br/>
13, 14, 14, 14, 14, 14, 15, 15, 16, 17, 19, 24, 5, 9, 11, 12, 9, 6,<br/>
9, 10, 12, 12, 13, 14, 15, 15, 16, 16, 22, 12, 8, 11, 11, 11, 12,<br/>
15, 16, 12, 9, 10, 10,<br/>
12, 12, 12, 12, 13, 15, 15, 16, 16, 16, 18, 20, 21, 6, 10, 7, 8, 9,<br/>
9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11,<br/>
11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,<br/>
12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14,<br/>
14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,<br/>
15, 15, 15, 15, 16, 16, 16, 16,<br/>
16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,<br/>
18, 18, 18, 18, 19, 19, 19, 19, 20, 21, 24, 26, 6, 14, 17, 17, 10,<br/>
8, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11,<br/>
11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14,<br/>
14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16,<br/>
16, 16, 17, 17, 17, 17, 17, 17,<br/>
18, 18, 18, 19, 19, 19, 8, 9, 11, 12, 10, 10, 9, 9, 9, 10, 10, 10,<br/>
10, 11, 11, 11, 11, 12, 13, 13, 14, 15, 17, 18, 19, 10, 10, 11, 13,<br/>
13, 19, 11, 11, 13, 15, 15, 16, 9, 10, 10, 11, 11, 12, 12, 13, 14,<br/>
14, 14, 15, 15, 15, 15, 15, 16, 18, 6, 15, 9, 11, 12, 14, 14, 15,<br/>
15, 16, 17, 6, 12, 14, 14, 17, 25, 11, 19, 9, 12, 13, 13, 23, 11,<br/>
15, 10, 11, 9, 10, 10, 10, 12,<br/>
12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17,<br/>
18, 19, 19, 19, 20, 20, 21, 7, 16, 10, 13, 14, 18, 18, 10, 10, 11,<br/>
11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13,<br/>
14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16,<br/>
16, 17, 17, 17, 19, 19, 19, 19, 19, 20, 21, 22, 22, 23, 24, 7, 12,<br/>
13, 13, 17, 17, 11, 11, 12, 12, 13,<br/>
13, 14, 15, 13, 18, 12, 11, 12, 12, 14, 14, 16, 16, 16, 19, 19, 20,<br/>
22, 10, 13, 13, 13, 14, 14, 15, 15, 17, 8, 12, 20, 8, 10, 10, 13,<br/>
14, 18, 18, 14, 14, 15, 16, 17, 18, 18, 21, 24, 12, 12, 13, 13, 13,<br/>
13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15,<br/>
15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,<br/>
16, 17, 17, 17, 17, 17, 17, 17, 17,<br/>
18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21, 14, 14,<br/>
15, 15, 16, 18, 18, 18, 19, 19, 13, 13, 14, 14, 14, 15, 15, 17, 17,<br/>
18, 18, 19, 19, 22, 14, 14, 15, 16, 16, 17, 19, 12, 15, 18, 22, 22,<br/>
10, 13, 14, 15, 15, 16, 16, 16, 18, 19, 20, 23, 25, 14, 15, 17, 13,<br/>
16, 16, 17, 19, 19, 21, 23, 17, 17, 17, 18, 18, 19, 20, 20, 20, 20,<br/>
21, 17, 18, 20, 23, 23, 16, 17, 23<br/>
]
</code></pre></li>
</ul>

<p>链接:<a href="https://pan.baidu.com/s/1yV5E9NZcDOJUFemTda4Daw">https://pan.baidu.com/s/1yV5E9NZcDOJUFemTda4Daw</a>  密码:p1b6</p>

<p>感谢：<a href="http://www.voidcn.com/article/p-cslrisvm-oc.html">C# 计算中文汉字笔画数</a></p>

<p>感谢：<a href="http://www.voidcn.com/article/p-zenngese-qo.html">VBS计算汉字笔画</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内存区域]]></title>
    <link href="http://kaelinda.top/15468313301172.html"/>
    <updated>2019-01-07T11:22:10+08:00</updated>
    <id>http://kaelinda.top/15468313301172.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">1、介绍下内存区域</h2>

<ul>
<li><p>栈(Stack)</p>
<ul>
<li>【特点】：先进先出</li>
<li>【分配和释放】：编译器自动分配、自动释放；</li>
<li>存放函数的参数值、局部变量，方法调用的实参也是保存在栈区的。</li>
<li>栈是系统数据结构，对应线程/进程是唯一的</li>
<li>优点是快速高效，缺点是有限制，数据不灵活</li>
</ul></li>
<li><p>堆(Heap)</p></li>
<li><p>全局区(静态区)</p></li>
<li><p>常量区/数据段</p></li>
<li><p>代码区/代码段</p></li>
</ul>

<p>【面试】 阿里p6面试题</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【精选】Mac 手动内存清理教程]]></title>
    <link href="http://kaelinda.top/15450161964215.html"/>
    <updated>2018-12-17T11:09:56+08:00</updated>
    <id>http://kaelinda.top/15450161964215.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">一、查看内存占用情况</h2>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-4734b7ee4a571010.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"/></p>

<h2 id="toc_1">二、管理内存</h2>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-fe84152bd070aca0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"/></p>

<h3 id="toc_2">1、废纸篓</h3>

<p>清理非废纸篓的道理我就不废话了吧。</p>

<span id="more"></span><!-- more -->

<h3 id="toc_3">2、清理文稿</h3>

<p>按照大小排序 清理文件 优先清理大文件</p>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-a28b01c486d51b60.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"/></p>

<p>如果你是小白，清理玩这些也就差不多了。<br/>
如果你是开发者（Coder），那请您继续：</p>

<h2 id="toc_4">三、清理隐藏文件夹 中的垃圾文件</h2>

<h3 id="toc_5">1、【显示】or【隐藏】  隐藏文件夹</h3>

<ul>
<li>显示隐藏文件：</li>
</ul>

<pre><code class="language-text">defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder
</code></pre>

<ul>
<li>隐藏 隐性文件：</li>
</ul>

<pre><code class="language-text">defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder
</code></pre>

<h3 id="toc_6">2、超级用户的文件清理</h3>

<h4 id="toc_7">勾选☑️显示侧边栏上的磁盘 【硬盘】</h4>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-d0d31f21c6f6a87a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"/></p>

<h4 id="toc_8">清理已卸载APP留下的痕迹</h4>

<p>这里需要注意的是，确定已卸载的，没用到的APP痕迹清理掉，不要清理多了，否则会导致部分APP失效。<br/>
比如：我想清理掉所有Adobe系列的APP 以及缓存。<br/>
<img src="http://upload-images.jianshu.io/upload_images/412206-9cac391a841fff2f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"/></p>

<h3 id="toc_9">1、Mac 当前用户环境清理</h3>

<p>Finder 侧边栏找到你的当前账户：<br/>
<img src="http://upload-images.jianshu.io/upload_images/412206-9e82f8b508a2fa1f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"/></p>

<p>如果你是安卓开发者、或者混合开发者，请看这里：</p>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-a76ad6d57a292aaf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安卓SDK"/></p>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-51d793f73aa7f519.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安卓SDK buildTool 版本支持"/></p>

<p>SDK根据自己开发项目选择下载（如果你磁盘够用，那你可以随便下）。</p>

<p>如果你是iOS开发者请看下一条：</p>

<h3 id="toc_10">2、iOS开发者清理内容</h3>

<p><code>/Libary(资源库)/Developer</code>   文件夹下</p>

<h4 id="toc_11">清理模拟器上面安装APP的缓存文件</h4>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-e72cb97e3e14504c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="模拟器上APP的缓存文件 沙盒路径"/></p>

<h4 id="toc_12">清理打包文件缓存</h4>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-a5ba95c90daab824.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Archive 打包发布APP 的临时文件"/></p>

<h4 id="toc_13">清理支持设备系统版本</h4>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-6df62dc27ca8e1dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="支持的模拟器的系统版本 老版本的可以删除掉了"/></p>

<h4 id="toc_14">清理老版本Xcode安装插件遗留</h4>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-d1a2332e70a3eef6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="只有Xcode老用户才会有这个吧"/></p>

<h4 id="toc_15">清理那些只安装在当前用户权限下的APP缓存</h4>

<p>在这里，通过APP的boundleID 大概的能推断出哪些是你自己可清理的APP缓存吧？</p>

<p><img src="http://upload-images.jianshu.io/upload_images/412206-24de398150dfa0e4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="/资源库/Application Script"/></p>

<p>清理 Application Support:<br/>
这里根据自己情况看看哪些是自己不再需要的APP，遗留下来的垃圾文件，有选择性的清理下。</p>

<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fy9owaimynj30de0c3wgg.jpg" alt="/资源库/Application Support"/></p>

<h4 id="toc_16">清理环境缓存 （比如Jenkins）</h4>

<p>如果你不想再使用Jenkins环境了（你可能还会有别的环境），那么这里可以清理掉了：<br/>
<img src="http://upload-images.jianshu.io/upload_images/412206-fac3ca55a37edcd3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Masonry，布局UIScrollViewView]]></title>
    <link href="http://kaelinda.top/15422507660830.html"/>
    <updated>2018-11-15T10:59:26+08:00</updated>
    <id>http://kaelinda.top/15422507660830.html</id>
    <content type="html"><![CDATA[
<p><code>UIScrollView</code>比较特殊，frame布局时我们需要设置<code>contentSize</code>属性</p>

<ol>
<li><p>初始化ScrollView并添加到父视图 并 进行约束</p>
<pre><code class="language-text">// ------ 初始化ScrollView
UIScrollView *scrollView = UIScrollView.new;<br/>
self.scrollView = scrollView;<br/>
scrollView.backgroundColor = [UIColor grayColor];<br/>
// ------ 添加到父视图<br/>
[self addSubview:scrollView];<br/>
// ------ 对ScrollView进行约束<br/>
[self.scrollView mas_makeConstraints:^(MASConstraintMaker *make) {<br/>
    make.edges.equalTo(self);<br/>
}];
</code></pre></li>
<li><p>初始化ContentView 并进行约束</p>
<pre><code class="language-text">UIView* contentView = UIView.new;
// 添加contentView 到ScrollView上<br/>
[self.scrollView addSubview:contentView];<br/>
// 约束contentView<br/>
[contentView makeConstraints:^(MASConstraintMaker *make) {<br/>
    make.edges.equalTo(self.scrollView);<br/>
    make.width.equalTo(self.scrollView);<br/>
}];
</code></pre></li>
<li><p>添加子视图到contentView上 并再次对contentView进行约束</p>
<pre><code class="language-text">UIView *lastView;
CGFloat height = 25;<br/>
for (int i = 0; i &lt; 10; i++) {<br/>
    UIView *view = UIView.new;<br/>
    view.backgroundColor = [self randomColor];<br/>
    // 注意！！！ 这里是添加视图到 contentView上<br/>
    [contentView addSubview:view];<br/>
    UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(singleTap:)];<br/>
    [view addGestureRecognizer:singleTap];<br/>
    [view mas_makeConstraints:^(MASConstraintMaker *make) {<br/>
        make.top.equalTo(lastView ? lastView.bottom : @0);<br/>
        make.left.equalTo(@0);<br/>
        make.width.equalTo(contentView.width);<br/>
        make.height.equalTo(@(height));<br/>
    }];<br/>
    height += 25;<br/>
    lastView = view;<br/>
}<br/>
// ------&gt;&gt;&gt;&gt;&gt;&gt;: 这里 很关键！！！！<br/>
[contentView makeConstraints:^(MASConstraintMaker *make) {<br/>
    make.bottom.equalTo(lastView.bottom);<br/>
}];
</code></pre></li>
</ol>

<span id="more"></span><!-- more -->

<blockquote>
<p>讲解</p>
</blockquote>

<p>第一次约束是这样的：<br/>
先设置下edgs 让contentView能撑起scrollView来。<br/>
然后,如果竖直方向高度不固定，就先约束下相对固定的宽度；<br/>
如果水平方向宽度不固定，就需要先约束下高度；</p>

<pre><code class="language-text">// 约束contentView
    [contentView makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo(self.scrollView);
        make.width.equalTo(self.scrollView);
    }];
</code></pre>

<p>再次更新 加强约束时：<br/>
如果竖直方向高度不固定，则需要在此时约束下bottom 或者 top<br/>
如果水平方向不固定，则需要在此时约束下 left 或者 right</p>

<pre><code class="language-text">// ------&gt;&gt;&gt;&gt;&gt;&gt;: 这里 很关键！！！！
    [contentView makeConstraints:^(MASConstraintMaker *make) {
        make.bottom.equalTo(lastView.bottom);
    }];
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Swift笔记】引用计数]]></title>
    <link href="http://kaelinda.top/15409691048860.html"/>
    <updated>2018-10-31T14:58:24+08:00</updated>
    <id>http://kaelinda.top/15409691048860.html</id>
    <content type="html"><![CDATA[
<ul>
<li>和OC一样，Swift也是用ARC,也会有循环引用导致内存泄露</li>
<li>吧如果属性是可选类型，只能用weak修饰符避免循环引用。所引用对象被回收后改属性会被自动置为nil</li>
<li>如果属性不是可选类型，只能用无主引用（unowned）。所引用对象被回收后属性不会被置为nil，此时访问会导致运行时错误。类似OC中的unsafe_unretained修饰符</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift中类（Class）和 结构体（Struct）]]></title>
    <link href="http://kaelinda.top/15402889434646.html"/>
    <updated>2018-10-23T18:02:23+08:00</updated>
    <id>http://kaelinda.top/15402889434646.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">分析</h2>

<p>共同点：</p>

<ul>
<li>定义属性用于存储值</li>
<li>定义方法用于提供功能</li>
<li>定义下标操作使得可以通过下标语法来访问实例所包含的值</li>
<li>定义构造器用于生成初始化值</li>
<li>通过扩展以增加默认实现的功能</li>
<li>实现协议以提供某种标准功能</li>
</ul>

<p>与结构体相比，类还有如下的附加功能：</p>

<ul>
<li>继承允许一个类继承另一个类的特征</li>
<li>类型转换允许在运行时检查和解释一个类实例的类型</li>
<li>析构器允许一个类实例释放任何其所被分配的资源</li>
<li>引用计数允许对一个类的多次引用（对象引用）结构体总是通过被复制的方式在代码中传递，不使用引用计数。</li>
</ul>

<h2 id="toc_1">逐一对比</h2>

<span id="more"></span><!-- more -->

<h3 id="toc_2">定义</h3>

<pre><code class="language-text">//: ### 定义
class StudentClass{ }
struct StudebtStruct{ }
</code></pre>

<h3 id="toc_3">定义存储属性</h3>

<pre><code class="language-text">//: &gt; 类中定义的存储属性，如果不是可选类型，需要进行初始化；结构体则默认带有初始化方法
class StudentC01{
    var name: String!
}
struct StudebtS01{
    var name: String!
}
</code></pre>

<h3 id="toc_4">定义属性函数function</h3>

<p>关于@objc 请参考 <a href="https://blog.csdn.net/qq_35612929/article/details/79563110">Swift 4.0学习之：@objc的使用</a></p>

<pre><code class="language-text">//: ### 定义属性函数function
//: &gt; 类中可以使用 static 和 class两种修饰符；但是结构体中只能使用static修饰
class StudentC02{
    static var des:String = &quot;学生的类&quot;
    var name:String!
    @objc class func objc_describe()-&gt;String{
        return des
    }
    class func class_describe()-&gt;String{
        return des
    }
    static func static_describe()-&gt;String{
        return des
    }
}
struct StudentS02{
    static var des:String = &quot;学生的结构体&quot;
    var name:String!
    static func describe()-&gt;String{
        return &quot;这是一个定义学生的类&quot;
    }
}
</code></pre>

<h3 id="toc_5">扩展下标</h3>

<pre><code class="language-text">//: ### 扩展下标
//: &gt; *subscript*
class StudentC003{
    var names:[String] = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]
    subscript (index:Int)-&gt;String?{
        get{
            if names.count &lt;= index{
                return nil
            }
            return names[index]
        }
    }
}
struct StudentS003{
    var names:[String] = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]
    subscript (index:Int)-&gt;String?{
        get{
            if names.count &lt;= index{
                return nil
            }
            return names[index]
        }
    }
}
let sc003 = StudentC003()
sc003[1]// 2
let ss003 = StudentS003()
ss003[1]// 2
</code></pre>

<h3 id="toc_6">初始化</h3>

<pre><code class="language-text">//: ### 初始化
//: &gt; 结构体自带初始化方法（可以不写初始化方法）;
//: &gt; 类必须手写init方法，否则报错；
class StudentC004{
    var name:String
    init(name:String) {
        self.name = name
    }
}
struct StudentS004 {
    var name:String
    
}
let studentc004 = StudentC004(name: &quot;行走在北方&quot;)
let students004 = StudentS004(name: &quot;行走在北方&quot;)
</code></pre>

<h3 id="toc_7">扩展功能 Extention</h3>

<pre><code class="language-text">//: ### 扩展功能 Extention
extension StudentC004{
    func discribe() -&gt; String {
        return &quot;student class:&quot;+self.name
    }
}
extension StudentS004{
    func discribe() -&gt; String {
        return &quot;student struct:&quot; + self.name
    }
}
</code></pre>

<h3 id="toc_8">实现协议 protocol</h3>

<pre><code class="language-text">//: ### 实现协议 protocol
//: * 定义协议
protocol Capacity {
    func draw()//协议方法
}
//: * 实现协议方法
class StudentC05:Capacity{
    internal func draw() {
        
    }
    var name:String
    init(name:String) {
        self.name = name
    }
}
struct StudentS05:Capacity{
    internal func draw() {
        
    }
    var name:String
}
</code></pre>

<h3 id="toc_9">mutating 关键字的使用</h3>

<p>科普下:</p>

<ul>
<li><p>枚举和结构体都是值类型，Swift默认值类型的对象方法不能修改属性值,但是如果一定要修改 那就在函数前面添加mutating关键字</p></li>
<li><p>计算属性setter方法中不需要更改属性值的时候，不需要添加mutating关键字;</p></li>
<li><p>计算属性setter方法中更改属性值的时候，必须要添加mutating关键字</p></li>
</ul>

<pre><code class="language-text">protocol Action{
    var myY:Int{
        mutating get
    }
}
struct Point {
    var x:Int
    var y:Int
    mutating func modifyX(x: Int){
        self.x = x
    }
    var myY:Int{
        mutating get {//getter方法前面添加mutating关键字
            self.y = self.y*2
            return y
        }
    }
}
class ActionClass {
    var name:String?
    init(name:String) {
        self.name = name
    }
    var myName:String? {
        get {// class 是对象类型 可以直接修改
            self.name = &quot;666 -&gt; :&quot; + self.name!
            return self.name
        }
    }
    
}
let actionclass = ActionClass(name: &quot;NB&quot;)
</code></pre>

<h2 id="toc_10">判断两个对象地址是否相同（验证 引用类型 和 值类型）</h2>

<pre><code class="language-text">//: ### 判断两个对象地址是否相同
//: &gt; 类是引用类型；结构体是值类型；结构体不能通过=== 、！==类判断比较
//: &gt;
class StudentC07{
    var name: String
    init(name:String) {
        self.name = name
    }
}

let studentc071 = StudentC07(name: &quot;原始名字&quot;)
var studentc072 = studentc071
studentc071.name = &quot;新名字&quot;
print(&quot;student071:\(studentc071.name)\nstudent072:\(studentc072.name)&quot;)
if studentc071 === studentc072 {
    print(&quot;类是引用类型，最终指向同一块内存&quot;)
}
struct StudentS07{
    var name: String
    init(name:String) {
        self.name = name
    }
}
let students071 = StudentS07(name: &quot;结构体：原始名字&quot;)
var students072 = students071
students072.name = &quot;结构体：新名字&quot;
print(&quot;students071:\(students071.name)\nstudents072\(students072.name)&quot;)
</code></pre>

<h3 id="toc_11">deinit 释放资源</h3>

<p><a href="https://www.jianshu.com/p/9e725362eeb1">Swift中的deinit方法</a></p>

<pre><code class="language-text">//: ### deinit 释放资源
//: &gt; 类有deinit方法；结构体中没有deinit方法。
class StudentC08{
    var name: String
    init(name:String) {
        self.name = name
    }
    deinit {
        //这里释放资源
    }
}
</code></pre>

<h3 id="toc_12">lazy：延迟属性（懒加载）</h3>

<p>class 有延迟属性；struct没有延迟属性</p>

<pre><code class="language-text">//: &gt; 延迟存储属性是指当第一次被调用的时候才会计算其初始值的属性。在属性声明前使用 lazy 来标示一个延迟存储属性
class Importor{
    var fileName = &quot;data.txt&quot;
}
class DataManager{
    lazy var importor = Importor()
    var Data = [String]()
}
</code></pre>

<h3 id="toc_13">继承</h3>

<pre><code class="language-text">//: ### 继承
//: &gt; 类能继承；结构体不能继承。
class Person{
    var name:String
    init(name:String) {
        self.name = name
    }
}
class Student06: Person {
    var score : Float
    init(name: String, score: Float){
        self.score = score//先给父类中没有的属性赋值，再调用父类init方法
        super.init(name: name)
    }
}   
</code></pre>

<ul>
<li><p>继承之后 可重写父类方法/属性</p>
<ol>
<li><p>重写计算属性：只能增加功能不能减少功能——&gt;父类中有setter getter,那么子类重写计算属性 setter getter都必须要有。父类中只有setter  子类中可以在重写setter的同时增加getter</p></li>
<li><p>final 关键字可以让属性不被重写 或者 继承</p></li>
</ol></li>
</ul>

<pre><code class="language-text">//: * 重写计算属性
//: * 重写对象方法
//: * 重写类方法
//: * 重写初始化方法
//: * 重写存储属性

//: _父类_
class Person{
    //存储属性
    var name:String = &quot;person&quot;
    //计算属性
    var rename:String{
        return self.name
    }
    //初始化方法
    init(_ name:String) {
        self.name = name
    }
    //对象方法
    func describe() -&gt; String {
        return self.name
    }
    //类方法
    class func describeClass()-&gt;String{
        return &quot;这是一个描述人的类&quot;
    }
}
//: _子类_
class Man: Person {
    //重写存储属性
    override var name: String{
        didSet{
            print(&quot;man 对象中 name 的原始值：\(self.name)&quot;)
            self.name = &quot;man:&quot;+self.name
        }
    }
    var score : Double
    //重写setter getter
    override var rename: String{
        set{
            self.name = &quot;man:&quot;+newValue
        }
        get{
            return &quot;_&quot;+self.name
        }
    }
    //重写初始化方法
    override init(_ name: String) {
        self.score = 0.0
        super.init(name)
    }
    //重写对象方法
    override func describe() -&gt; String {
        return self.name + &quot;_score:\(self.score)&quot;
    }
    // 重写类方法
    override class func describeClass() -&gt; String {
        return &quot;我是描述男人的类&quot;
    }
}
var man00 = Man(&quot;kael&quot;)
print(man00.name)
</code></pre>

<h3 id="toc_14">class 的类型检测</h3>

<ol>
<li>首先在自己的初始化方法中先给自己的属性初始化</li>
<li>然后调用父类的初始化</li>
<li>最后修改父类的属性</li>
</ol>

<pre><code class="language-text">//: ### 类型检测  is  as?
var person01 = Person(&quot;person01&quot;)
var man01 = Man(&quot;man01&quot;)

if person01 is Person {
    print(&quot;person01：我是Person&quot;)
}else{
    print(&quot;person01：我不是Person&quot;)
}
if person01 is Man {
    print(&quot;person01：我是Man&quot;)
}else{
    print(&quot;person01：我不是Man&quot;)
}
if man01 is Person {
    print(&quot;man01：我是Person&quot;)
}else{
    print(&quot;man01：我不是Person&quot;)
}
if man01 is Man {
    print(&quot;man01：我是Man&quot;)
}else{
    print(&quot;man01：我不是Man&quot;)
}

if let p = person01 as? Person {
    print(&quot;person01 是 Person&quot;)
}
if let p = person01 as? Man{
    print(&quot;person01 是Man&quot;)
}else{
    print(&quot;person01 不是Man&quot;)
}
if let p = man01 as? Person {
    print(&quot;man01 是 Person&quot;)
}
if let p = man01 as? Man{
    print(&quot;man01 是Man&quot;)
}else{
    print(&quot;man01 不是Man&quot;)
}


</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 竖屏NavigationController present 到只支持横屏的界面 版本解析]]></title>
    <link href="http://kaelinda.top/15397592871272.html"/>
    <updated>2018-10-17T14:54:47+08:00</updated>
    <id>http://kaelinda.top/15397592871272.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">各版本对比</h2>

<ul>
<li><p>iOS9 和 iOS10 差别就是返回时 导航会有自己动画<br/>
<img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwb87gvzoxg30890gob2f.gif" alt="iOS9"/> <img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwb88tdp6hg30860gnx6t.gif" alt="iOS10"/> </p></li>
<li><p>iOS11 和 iOS12 两者没什么区别， 但是跟之前版本变化很大 会有 20像素的导航条空白区域（真机上的现象是，vc.view上移20像素（iPhone X系列可能会是44像素非常明显））<br/>
<img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwb89abhgbg30890gnnpk.gif" alt="iOS11"/> <img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwb8d01n7pg30840goe87.gif" alt="iOS12"/></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 转场动画 全解析]]></title>
    <link href="http://kaelinda.top/15395963175730.html"/>
    <updated>2018-10-15T17:38:37+08:00</updated>
    <id>http://kaelinda.top/15395963175730.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">转场代理(Transition Delegate)：</h2>

<pre><code class="language-text">&lt;UINavigationControllerDelegate&gt; //UINavigationController 的 delegate 属性遵守该协议。
&lt;UITabBarControllerDelegate&gt; //UITabBarController 的 delegate 属性遵守该协议。
&lt;UIViewControllerTransitioningDelegate&gt; //UIViewController 的 transitioningDelegate 属性遵守该协议。
</code></pre>

<h2 id="toc_1">动画控制器</h2>

<p>负责添加视图以及执行动画；遵守<code>&lt;UIViewControllerAnimatedTransitioning&gt;</code>协议；</p>

<h2 id="toc_2">交互控制</h2>

<p>通过交互手段，通常是手势来驱动动画控制器实现的动画，使得用户能够控制整个过程；遵守<code>&lt;UIViewControllerInteractiveTransitioning&gt;</code>协议；系统已经打包好现成的类供我们使用。</p>

<h2 id="toc_3">转场环境(Transition Context):</h2>

<p>提供转场中需要的数据；遵守<code>&lt;UIViewControllerContextTransitioning&gt;</code>协议；由 UIKit 在转场开始前生成并提供给我们提交的动画控制器和交互控制器使用。</p>

<h2 id="toc_4">转场协调器(Transition Coordinator)：</h2>

<p>可在转场动画发生的同时并行执行其他的动画，其作用与其说协调不如说辅助，主要在 Modal 转场和交互转场取消时使用，其他时候很少用到；遵守<code>&lt;UIViewControllerTransitionCoordinator&gt;</code>协议；由 UIKit 在转场时生成，UIViewController 在 iOS 7 中新增了方法transitionCoordinator()返回一个遵守该协议的对象，且该方法只在该控制器处于转场过程中才返回一个此类对象，不参与转场时返回 nil。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发之 【奇巧淫技篇】]]></title>
    <link href="http://kaelinda.top/15374957318613.html"/>
    <updated>2018-09-21T10:08:51+08:00</updated>
    <id>http://kaelinda.top/15374957318613.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">调试</h2>

<ul>
<li><a href="http://www.cocoachina.com/ios/20170609/19482.html">Xcode 9 以后可以无线调试</a></li>
</ul>

<h2 id="toc_1">Charlse篇</h2>

<ul>
<li><a href="https://blog.csdn.net/lea__dongyang/article/details/73294751">Charles抓包HTTPS网络请求</a></li>
<li><a href="https://www.cnblogs.com/dsxniubility/p/4621314.html">Charlse截取网络请求，搭建自己的数据服务</a></li>
</ul>

<h2 id="toc_2">iOS 系统NavigationBar StatusBar</h2>

<ul>
<li><p><a href="https://note.altair21.org/2016/12/22/iOS%E4%B8%AD%E9%9A%90%E8%97%8FStatus%20Bar%E8%80%8C%E4%B8%8D%E6%94%B9%E5%8F%98Navigation%20Bar%E9%AB%98%E5%BA%A6%E7%9A%84%E5%81%9A%E6%B3%95/">显示隐藏 statusBar 不改变NavigationBar高度</a></p>
<pre><code class="language-text">// 隐藏 状态条
[UIApplication sharedApplication].keyWindow.windowLevel = UIWindowLevelStatusBar + 1;<br/>
// 显示 状态条<br/>
[UIApplication sharedApplication].keyWindow.windowLevel = UIWindowLevelNormal;
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS CALayer动画]]></title>
    <link href="http://kaelinda.top/15359519661802.html"/>
    <updated>2018-09-03T13:19:26+08:00</updated>
    <id>http://kaelinda.top/15359519661802.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">keyPath</h2>

<pre><code class="language-text">transform.scale = 比例轉換
transform.scale.x = 宽的比例轉換
transform.scale.y = 高的比例轉換
transform.rotation.z = 平面圖的旋轉
opacity = 透明度
margin=边框间隔?
zPosition = 平面图的位置
backgroundColor = 背景色
cornerRadius = layer的角度
borderWidth = 边框宽度
contents = 内容?
bounds = 大小?
contentsRect = 内容矩形
frame = 位置
hidden = 隐藏
mask = 标记
maskToBounds
position = 位置
shadowOffset = 阴影偏移?
shadowColor = 阴影颜色
shadowRadius = 阴影角度
</code></pre>

<h2 id="toc_1">CALayer</h2>

<h2 id="toc_2">CoreAnimation</h2>

<h2 id="toc_3">CAAnimation</h2>

<h3 id="toc_4">基本属性说明</h3>

<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>

<tbody>
<tr>
<td>duration</td>
<td>动画持续时间</td>
</tr>
<tr>
<td>repeatCount</td>
<td>重复次数，无限循环可以设置INFINITY(HUGE_VALF)或者MAXFLOAT</td>
</tr>
<tr>
<td>repeatDuration</td>
<td>重复时间</td>
</tr>
<tr>
<td>removeOnCompletion</td>
<td>默认为YES，代表动画执行完毕，从Layer上移除，图形会恢复到动画执行之前的状态。如果想要保持动画最终状态，那就设置为NO，并且fillMode = kCAFillModeForwards；</td>
</tr>
<tr>
<td>fillMode</td>
<td>当前视图在非active时段的状态比如 动画开始前 动画结束后</td>
</tr>
<tr>
<td>beginTime</td>
<td>可以用来延迟动画开始时间，让多个动画顺序执行</td>
</tr>
<tr>
<td>timingFuction</td>
<td>速度控制函数，控制动画运行的节奏</td>
</tr>
<tr>
<td>deleget</td>
<td>代理</td>
</tr>
</tbody>
</table>

<h3 id="toc_5">fillMode 说明</h3>

<ul>
<li><p><code>kCAFillModeRemoved</code> 这个是默认值，也就是说当动画开始前和动画结束后，动画对layer都没有影响，动画结束后，layer会恢复到之前的状态</p></li>
<li><p><code>kCAFillModeForwards</code> 当动画结束后，layer会一直保持着动画最后的状态</p></li>
<li><p><code>kCAFillModeBackwards</code> 在动画开始前，只需要将动画加入了一个layer，layer便立即进入动画的初始状态并等待动画开始。</p></li>
<li><p><code>kCAFillModeBoth</code> 这个其实就是上面两个的合成.动画加入后开始之前，layer便处于动画初始状态，动画结束后layer保持动画最后的状态</p></li>
</ul>

<h3 id="toc_6">动画的暂停 和 恢复</h3>

<pre><code class="language-text">#pragma - mark 暂停CALayer的动画
-(void)pauseLayer:(CALayer*)layer
{
    CFTimeInterval pausedTime = [layer convertTime:CACurrentMediaTime() fromLayer:nil];

    // 让CALayer的时间停止走动
      layer.speed = 0.0;
    // 让CALayer的时间停留在pausedTime这个时刻
    layer.timeOffset = pausedTime;
}

#pragma - mark 恢复CALayer的动画
-(void)resumeLayer:(CALayer*)layer
{
    CFTimeInterval pausedTime = layer.timeOffset;
    // 1. 让CALayer的时间继续行走
      layer.speed = 1.0;
    // 2. 取消上次记录的停留时刻
      layer.timeOffset = 0.0;
    // 3. 取消上次设置的时间
      layer.beginTime = 0.0;
    // 4. 计算暂停的时间(这里也可以用CACurrentMediaTime()-pausedTime)
    CFTimeInterval timeSincePause = [layer convertTime:CACurrentMediaTime() fromLayer:nil] - pausedTime;
    // 5. 设置相对于父坐标系的开始时间(往后退timeSincePause)
      layer.beginTime = timeSincePause;
}
</code></pre>

<h2 id="toc_7">CABasicAnimation</h2>

<h2 id="toc_8">CAKeyframeAnimation 关键帧动画</h2>

<h2 id="toc_9">CAAnimationGroup 动画组</h2>

<h2 id="toc_10">贝塞尔曲线</h2>

<h2 id="toc_11">弹性动画 CASpringAnimation</h2>

<pre><code class="language-text">CASpringAnimation *springAnimation = [CASpringAnimation animationWithKeyPath:@&quot;transform.scale&quot;];
springAnimation.damping = 7;// 阻尼系数(学过物理的都知道)
springAnimation.stiffness = 100;// 刚度系数（形变后产生弹力的大小的系数。刚度系数越大，弹力越大）
springAnimation.mass = 1;// 惯性系数 代表物体质量
springAnimation.initialVelocity = 2.0;// 初始速度 0 初始速度与运动方向一致 负数，初始速度与运动方向不一致
springAnimation.fromValue = @0;// 初始动画改变属性的值
springAnimation.toValue = @1;// 最终动画改变属性的值
springAnimation.duration = 2.0;// 动画时长「敲黑板，划重点！这个很重要」
[self.layer addAnimation:springAnimation forKey:@&quot;springScale&quot;];
</code></pre>

<h2 id="toc_12">特殊的Layer实现特殊动画</h2>

<h3 id="toc_13">CATransition</h3>

<h3 id="toc_14">CAReplicatorLayer</h3>

<h3 id="toc_15">CAEmitterLayer 粒子引擎</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Category 和 Extention 的本质区别【面试必备】]]></title>
    <link href="http://kaelinda.top/15344051783893.html"/>
    <updated>2018-08-16T15:39:38+08:00</updated>
    <id>http://kaelinda.top/15344051783893.html</id>
    <content type="html"><![CDATA[
<p><a href="https://blog.csdn.net/lwq718691587/article/details/60964392">感谢这位博主的博客:由category为什么不能添加属性所想到的</a></p>

<h2 id="toc_0">为什么category 不能添加属性，而Extention能添加？</h2>

<p>这个问题从几个方面来解释下：</p>

<ul>
<li><p>什么是OC中的属性？</p>
<p>属性，是某个对象持有的特性。一般（注意这里的一般）都是在编译期编译的时候，对象持有的属性会决定对象的内存布局，编译期过后，在运行期，一般很少更改这个布局，因为运行期更改已经定好的布局，不仅会带来一系列的内存问题，而且内存开销会很大。</p>
<p><strong>打个比方</strong>:就像是买房摇号有几千人排队呢，你后来的去插队，那么就会导致后面的人的位置发生变化，并且还会激起民愤！</p></li>
<li><p>作用时期</p>
<p>Extension 是在编译期决议（起作用）<br/>
Category 是在 运行期决议（起作用）</p></li>
<li><p>作用原理</p>
<p>Extention是类的一部分，能决定类的内存布局，跟对象的生命周期一致，对象生成Extention添加的属性有效，对象释放，属性释放；<br/>
Category并不是真正的类，他的作用是动态的给类添加方法，不改变类的内存布局。</p></li>
</ul>

<h3 id="toc_1">那么，现在再来看这个问题，是不是很好解释了呢</h3>

<blockquote>
<p>因为Extention是在编译期期决议，那么他就能决定类对象的内存布局，就能正常的给类添加属性。<br/>
而Category是在运行期决议的，动态的更改类，如果添加了属性，那就会更改内存布局；而内存布局是在编译期就定好了的，运行期更改内存布局会引发不必要的内存风险并且会有很大的内存开销。所以，苹果为了避免这种情况，禁止类别动态添加属性更改内存布局。</p>
</blockquote>

<h3 id="toc_2">但是，为什么 runtime 动态添加属性呢？</h3>

<p>那是因为 runtime关联的属性，并不是在真正的属性的位置添加的，而是在 AssociationsManager 管理的一个静态区内存 AssociationsHashMap 来存储关联对象的。所有用runtime 动态关联的属性都存在这个全局的map里面。map的key就是关联的对象的内存地址，而这个map的value又是另外一个AssociationsHashMap，里面保存了关联对象的键值对。</p>

<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fucjrrjsgvj312w0suq5z.jpg" alt="内存示意图"/></p>

<h3 id="toc_3">那如何销毁RunTime关联的属性呢？</h3>

<p>runtime的销毁对象函数objc_destructInstance里面会判断这个对象有没有关联对象，如果有，会调用_object_remove_assocations做关联对象的清理工作。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络是怎样连接的]]></title>
    <link href="http://kaelinda.top/15341646765442.html"/>
    <updated>2018-08-13T20:51:16+08:00</updated>
    <id>http://kaelinda.top/15341646765442.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">生成HTTP请求信息</h2>

<p>URL种类：<code>http:</code> <code>ftp:</code> <code>file:</code> <code>mailto:</code> <code>news:</code></p>

<p>URL组成：协议 + 用户名(可省略) + 密码(省略) + 服务器域名 + 端口号(可省略) + 文件路径名</p>

<p><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fu8d5d2w7jj313e19atf8.jpg" alt=""/></p>

<h3 id="toc_1">网络请求</h3>

<p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fu8fexsc00j313a10ewp6.jpg" alt=""/></p>

<h3 id="toc_2">HTTP</h3>

<ul>
<li><code>URI</code>：Uniform Resource Identifier，统一资源标识符</li>
<li><code>CGI</code>：对 Web 服务器程序调用其他程序的规则所做的定义就是 CGI</li>
</ul>

<h3 id="toc_3">DNS服务器</h3>

<p>DNS查询服务包含下面三部分：</p>

<ul>
<li><code>域名</code>：服务器、邮件服务器(邮件地址中 @ 后面的部分)的名称</li>
<li><code>Class</code>：在最早设计 DNS 方案时，DNS 在互联网以外的其他网络中的应用也被考虑到了，而 Class 就是用来识别网络的信息。不过，如今除了互联网并没有其他的网络了，因此 Class 的值永远是代表互联网的 IN</li>
<li><code>记录类型</code>:表示域名对应何种类型的记录。例如，当类型为 A 时，表示域名 对应的是 IP 地址;当类型为 MX 时，表示域名对应的是邮件服务 器。对于不同的记录类型，服务器向客户端返回的信息也会不同</li>
</ul>

<p><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fubcsxb3lzj318812ualm.jpg" alt="DNS服务器的基本工作"/></p>

<p><strong>敲黑板，划重点！！！</strong></p>

<blockquote>
<p>上级 DNS 服务器保管着所有下级 DNS 服务器的信息，所以我们可以从根域开始一路往下顺藤摸瓜找到任意 一个域的 DNS 服务器；<br/>
根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中，任何 DNS 服务器就都可 以找到并访问根域 DNS 服务器了。</p>
</blockquote>

<p>协议栈传输数据：</p>

<ol>
<li>服务器一方创建套接字，等待客户端向该套接字连接管道 (创建套接字阶段)</li>
<li>客户端创建一个套接字，然后从该套接字伸出管道去连接服务端的套接字 (创建套接字阶段 、连接套接字阶段)</li>
<li>客户端套接字 和 服务端套接字建立连接以后就可以传输网络数据了（数字信息 digital data）(通信阶段)</li>
<li>断开通道、删除套接字 (断开阶段)</li>
</ol>

<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fup9h6snmhj316s0zg7ah.jpg" alt=""/></p>

<ul>
<li>描述符:应用程序用来识别套接字的机制</li>
<li>IP 地址和端口号:客户端和服务器之间用来识别对方套接字的机制
<img src="https://ws2.sinaimg.cn/large/006tNbRwly1fupfvmg5jwj31j40x60xr.jpg" alt=""/></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发必备 之 UITableView  优化]]></title>
    <link href="http://kaelinda.top/15336319970231.html"/>
    <updated>2018-08-07T16:53:17+08:00</updated>
    <id>http://kaelinda.top/15336319970231.html</id>
    <content type="html"><![CDATA[
<ul>
<li>cell复用</li>
<li>图片缓存</li>
<li>图片圆角（离屏渲染）</li>
<li>cell 高度计算（缓存）</li>
<li>NSDateFormatter 优化</li>
<li>reload方法按需加载（单独加载某个cell 某个section）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 奇怪问题搜集栈]]></title>
    <link href="http://kaelinda.top/15329136223185.html"/>
    <updated>2018-07-30T09:20:22+08:00</updated>
    <id>http://kaelinda.top/15329136223185.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">更改值的问题</h2>

<h3 id="toc_1">问题1</h3>

<blockquote>
<p><strong>问题描述</strong>：某个类中用一个属性，或者成员变量去标记某个功能的开关，可当修改该属性时，setter方法里面值改过来了，但是使用的地方取值判断的时候，却是未修改时的值。</p>
</blockquote>

<ul>
<li>原因1：block引用了基本类型，引用之前__block可解决</li>
<li>原因2：可能是某各类持有当前对象未释放，然后又重新创建了新对象导致。解决方法：要么先释放再创建，要不重用旧的对象，不去重新创建。</li>
<li>原因3：多处同时修改这个值，导致值被覆盖。</li>
<li>原因4：低级错误！那很有可能是，还没传值的时候，先get这个值去使用，后传入的这个值！！！！！(有人经常犯这个错)</li>
</ul>

<span id="more"></span><!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 架构模式学习笔记]]></title>
    <link href="http://kaelinda.top/15324187632197.html"/>
    <updated>2018-07-24T15:52:43+08:00</updated>
    <id>http://kaelinda.top/15324187632197.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">设计模式</h2>

<p>设计模式 和 编码技巧 、架构模式的区别：</p>

<ul>
<li><p>设计模式：特定场景下的最佳实践 如： MVC MVVM MVP。</p></li>
<li><p>编码技巧：单例模式、工厂模式等</p></li>
<li><p>架构模式：包括网络模块实现、数据存储模块实现、业务逻辑模块实现分离复用等</p></li>
</ul>

<blockquote>
<p><strong>架构模式  &gt; 设计模式 &gt; 编码技巧</strong></p>
</blockquote>

<span id="more"></span><!-- more -->

<ul>
<li>继承</li>
<li>关联</li>
<li>组合</li>
<li>聚合</li>
</ul>

<h3 id="toc_1">MVC</h3>

<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1ftrut0kos5j318q0v8dj6.jpg" alt="MVC"/></p>

<ul>
<li>用户触发View交互，传递数据给Controller，controller接收UI更改信号去更改Model，再将Model传递给View 更新View；</li>
<li>当然 如有特殊需求 也能实现一些反向的数据通信：View  更改Model，传递给Controller，controller去更改View</li>
</ul>

<p><strong>由此可见：整个UI更新过程，数据是单向(环状)传递的</strong></p>

<p>环状这就导致了，类与类之间交互复杂，业务逻辑的<strong>耦合度</strong>会很高</p>

<h4 id="toc_2">解重</h4>

<ul>
<li>Present：处理数据初始化、数据组合、数据过滤  UI 交互传值 delegate</li>
<li>dataSource：传入CellIdentity ，以及model</li>
</ul>

<p>Controller  跟present交互<br/>
Model 跟 present交互<br/>
present作为中心逻辑处理</p>

<h4 id="toc_3">解耦</h4>

<ul>
<li>子UI组件 刷新UI的时候大都会有这个方法:</li>
</ul>

<pre><code class="language-text">-(void) loadModel:(BaseModel *)model;
</code></pre>

<p>这样，每次在复用UI组件的时候不得已，可能还得复用<code>Model</code>。如果跨项目，复用<code>Model</code>就可能不太合理了，那么我们在刷新UI的时候 尽可能的载入进本的更该数值 而并非 笨重的<code>Model</code>。</p>

<ul>
<li>MVC 中环形的数据传递，必然导致 文件的相互包含，相互引用、相互依赖问题，MVP模式中把依赖都挪到了present 是一个比较好的选择。</li>
</ul>

<h3 id="toc_4">MVP</h3>

<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftruta5qp1j31840tygpy.jpg" alt="MVP"/></p>

<ul>
<li>优点： View组件很薄，处理的逻辑很少，不需要持有任何的Model文件的引用，复用的时候直接copy   View组件进去就能用；传统的MVC中都是Model去驱动View ，View组件中都会引用Model，耦合度高改了model就得改View ，改了View ，model也可能需要更改。</li>
<li>缺点：present 作为中间人，需要交互的内容太多，逻辑很重</li>
</ul>

<h3 id="toc_5">MVVM</h3>

<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1ftrutkkon8j317a0tu78o.jpg" alt="MVVM"/></p>

<ul>
<li>MVVM：<br/>
Model 、View 依旧是互不通信，跟MVP类似，<br/>
唯一不同就是View和<code>ViewModel</code>是双向绑定的关系，并非双向通信，比双向通信关系更紧密<code>ViewModel</code>跟  model 是双向通信的关系，没有<code>ViewModel</code> 跟View关系那么紧密</li>
</ul>

<h2 id="toc_6">总结</h2>

<p>MVP 、MVVM 其实都是MVC发展而来的，三种设计模式没有孰优孰劣，只有哪个更适合。</p>

<p>个人总结对比：</p>

<ul>
<li>MVC：相对灵活，简单，容易掌握，数据传递比较直接。更适合轻量级的项目。</li>
<li>MVP：有了一定的规则，present 集中处理业务逻辑，一定程度上减少了耦合度，中小型项目都还比较合适</li>
<li>MVVM：写起来听复杂的，每个View对应一个ViewModel，对于成型的稳定的大项目来说，还是很适合的，一定程度上降低了耦合度不会直接操作View  和 Model 而是操作ViewModel 去更改View 更改Model，耦合度低，较为灵活。 Model 、View、ViewModel三者之间关系以及各自作用熟悉了以后，还是很清晰的。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS tableView 滚动到指定行/段  以及遇到的bug 指南]]></title>
    <link href="http://kaelinda.top/15311162986405.html"/>
    <updated>2018-07-09T14:04:58+08:00</updated>
    <id>http://kaelinda.top/15311162986405.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">滚动方式</h2>

<blockquote>
<p>本篇中的bug会不定期更新的，有更好解决办法或者 有 新的Bug探讨的请加QQ:1290281526 私聊</p>
</blockquote>

<h3 id="toc_1">选中cell滚动到指定位置</h3>

<p>很简单，一句话完事儿：</p>

<pre><code class="language-text">/* 
    最近选中的cell 滚动到  指定位置 ：
    UITableViewScrollPositionNone, 
    UITableViewScrollPositionTop, // 顶部
    UITableViewScrollPositionMiddle, // 中间
    UITableViewScrollPositionBottom// 底部
*/
[self.tableView scrollToNearestSelectedRowAtScrollPosition:UITableViewScrollPositionTop animated:YES];

/** 滚动到顶部 */
[self.tableView setScrollsToTop:YES];
    
/** 让指定区域滚动到可视区域，如果已经在可视区域 则该方法无效 */
[self.tableView scrollRectToVisible:CGRectMake(0, 0, 100, 100) animated:YES];
</code></pre>

<span id="more"></span><!-- more -->

<h3 id="toc_2">滚动到指定的 <code>IndexPath</code></h3>

<p>同样的只是比上一个方法多了一个参数：indexPath,只要是用过tableView的对这个应该都很熟悉吧。</p>

<pre><code class="language-text">/* 滚动指定段的指定row  到 指定位置*/
[self.tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0] atScrollPosition:UITableViewScrollPositionTop animated:YES];
</code></pre>

<h3 id="toc_3">通过设置ScrollView的contentOffset滚动到指定的位置</h3>

<p>这个方法比较灵活，但是问题也是最多的，笔者项目中是多层的tableView嵌套的多级目录展开问题，就用到了这个同时也出现了一些问题。</p>

<pre><code class="language-text">/*通过设置contentOffset的方式滚动tableView到指定的位置*/
[self.tableView setContentOffset:CGPointMake(0, 0) animated:YES];
</code></pre>

<p>这里面需要一个很重要的参数：<code>CGPoint</code>。<br/>
那么，这个位置我们改怎么计算得来？别急，Apple的UITableView组件自带了一些我们并不熟悉，但是却很强大的API。</p>

<pre><code class="language-text">/** 指定section的最顶部的rect */
[self.tableView rectForSection:0];
    
/** 指定cell的rect */
[self.tableView rectForRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];
    
/** sectionHeader 的rect */
[self.tableView rectForHeaderInSection:0];
    
/** sectionFooter 的rect */
[self.tableView rectForFooterInSection:0];
</code></pre>

<p>另外在计算位置的时候可能会用到的UIView的方法：</p>

<pre><code class="language-text">/* viewB上的viewC相对于viewA的frame */
[viewB convertRect:viewC.frame toView:viewA];

/* viewA上的viewB相对于viewC的frame */
[viewC convertRect:viewB.frame fromView:viewA];
</code></pre>

<h2 id="toc_4">滚动时遇到的bug 以及解决</h2>

<ul>
<li><p>一定要记住 NSIndexPath 对象里面的row  和 section 一定要和数据源对应。千万不要越界！不要越界！不要越界！重要的事情说三遍。</p></li>
<li><p>滚动时 如果一旦滚动的幅度比较大，可能出现几种情况：</p>
<ul>
<li><p>1、速度太快，用户会眼花  【超出某个阈值取消滚动动画】</p></li>
<li><p>2、向下滚动，一旦offset出现负值，容易触发下拉刷新 【根据业务需要过滤下拉刷新】</p></li>
<li><p>3、有过度下滑 出现空白区域，并且没能触发下拉刷新 不碰触，不能收回。【去掉动画就OK了】</p></li>
</ul></li>
</ul>

]]></content>
  </entry>
  
</feed>
